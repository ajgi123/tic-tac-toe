{"version":3,"sources":["types/cellKind.ts","components/atoms/button/Button.tsx","hooks/useLocalStorage.ts","components/atoms/select/Select.tsx","components/Gameboard/GameboardItem/GameboardItem.module.scss","helpers/localStorageService.ts","components/absolute-wrapper/AbsoluteWrapper.tsx","components/atoms/input-number/InputNumber.tsx","components/Gameboard/GameboardItem/GameboardItem.tsx","components/Gameboard/Gameboard.tsx","components/navbar/dropdown-menu/dropdown-menu-item/DropdownMenuItem.module.scss","components/navbar/dropdown-menu/DropdownMenu.module.scss","pages/simulation-page/SimulationPage.module.scss","pages/simulation-page/simulation-page-components/pagination/Pagination.module.scss","components/navbar/Navbar.module.scss","components/navbar/navbar-items/NavbarItem.module.scss","pages/home-page/HomePage.module.scss","components/atoms/select/Select.module.scss","pages/simulation-page/simulation-page-components/simulated-game/SimulatedGame.module.scss","components/atoms/input-number/InputNumber.module.scss","components/navbar/dropdown/Dropdown.module.scss","components/Gameboard/Gameboard.module.scss","components/absolute-wrapper/AbsoluteWrapper.module.scss","pages/home-page/home-page-components/AivsAi-mode/AIvsAI.module.scss","components/atoms/button/Button.module.scss","pages/simulation-page/SimulationPage.tsx","components/atoms/loading/Loading.tsx","components/atoms/loading/Loading.module.scss","pages/simulation-page/simulation-page-components/simulated-game/SimulatedGame.tsx","pages/simulation-page/simulation-page-components/pagination/Pagination.tsx","worker.ts","logic/game-mode-info.ts","context/gameMode-context.tsx","components/navbar/dropdown-menu/dropdown-menu-item/DropdownMenuItem.tsx","components/navbar/dropdown-menu/DropdownMenu.tsx","components/navbar/dropdown/Dropdown.tsx","components/navbar/navbar-items/NavbarItem.tsx","components/navbar/Navbar.tsx","helpers/typedObjectKeys.ts","logic/simulationInfo.ts","logic/checkForWinner.ts","logic/AI.ts","helpers/bindTrailingArgs.ts","pages/home-page/home-page-components/AivsAi-mode/AivsAi.tsx","pages/home-page/home-page-components/PvsP-mode/PvsP.tsx","helpers/generateEmptyGameState.ts","pages/home-page/home-page-components/easy-mode/Easy.tsx","pages/home-page/HomePage.tsx","App.tsx","index.tsx"],"names":["CellKind","Button","props","className","styles","button","onClick","disabled","name","useLocalStorage","key","initialValue","initialiazeState","localStorageService","getItem","useState","storedValue","setStoredValue","useEffect","setItem","Select","select_label","select","value","onChange","e","currentTarget","options","map","option","label","module","exports","localStorage","JSON","stringify","otherwise","data","parse","AbsoluteWrapper","absolute_wrap_div","children","InputNumber","inputNumber","max","min","timeout","setTimeout","clearTimeout","input_label","input","type","step","GameboardItem","style","empty","cellFill","Circle","circle","Cross","cross","winCombination","includes","index","winner","length","draw","Empty","clickHandler","gameboard_item_div","Gameboard","gridColumns","Math","sqrt","gameState","gameboard_div","gridTemplateColumns","gridTemplateRows","item","numberInput","SimulationPage","simulatedGames","setSimulatedGames","isLoading","setIsLoading","circleAi","crossAi","number","inputsState","setInputsState","pathname","useLocation","path","useRouteMatch","history","useHistory","onClickHandler","a","worker","Worker","wrap","simulate","games","push","reduce","resArray","game","simulation_page","simulation_page_grid_div","prevState","Fragment","simulation_pie_div","title","color","dataEntry","labelStyle","fontSize","fontFamily","animate","labelPosition","render","Loading","text","split","base","loop","config","wobbly","from","transform","opacity","to","springs","useSprings","t","i","delay","loading_div","s","div","SimulatedGame","result","simulated_game","simulated_game_gameboard_div","Pagination","page","setPage","inputValue","pasedValue","howMany","setHowMany","pageNum","useParams","replace","startIndex","endIndex","array","ceil","slice","isNaN","buttons","pagination","pagination_grid_div","pagination_flex_div","GameModeInfo","PvsP","AIvsAI","Easy","Hard","localStorageKey","initialGameMode","GameModeContext","React","createContext","gameMode","setGameMode","GameModeContextProvider","Provider","DropdownMenuItem","isActive","active","onMouseEnter","onMouseEnterHandler","DropdownMenu","dropdown_menu","dropdown_menu_ul","dropdown_menu_p","info","Dropdown","dropdown","NavbarItem","open","setOpen","nav_item","onMouseLeave","route","nav_item_button","gameModeInfoKeys","object","k","arr","typedObjectKeys","Navbar","setInfo","useContext","navbar","navbar_ul","checkForWinner","lengthSqrt","rowSet","Set","rowKeys","columnSet","columnKeys","diagonalSet","diagonalKeys","checkForDrawSet","indexDiagonal","j","indexRow","indexColumn","add","size","has","values","next","clear","getEmptySpotsArray","prevVal","curVal","randomAi","emptySpotsArray","floor","random","miniMaxScope","aiPlayer","opponent","miniMax","player","memo","target","score","moves","move","currentGameState","bestMove","curValue","bindTrailingArgs","func","boundArgs","args","allArgs","isWin","setCircleAi","setCrossAi","isPlaying","setIsPlaying","timeOut","console","log","aiFunc","turn","moveAI","aivsai_div","initialSize","toString","gridSize","setGridSize","generateEmptyGameState","initialState","gameStates","setHistory","gameStateCopy","indexMove","changeState","HomePage","win","setWin","state","setState","useCallback","changedGameboardState","aiMove","bindedMinimax","winText","homepage","gamestate","homepage_div_gameboard","App","location","transitions","useTransition","slow","enter","leave","component","ReactDOM","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.e09f3901.chunk.js","sourcesContent":["export enum CellKind {\r\n  Circle = \"Circle\",\r\n  Cross = \"Cross\",\r\n  Empty = \"Draw\",\r\n}\r\n","import styles from \"./Button.module.scss\";\r\n\r\ntype ButtonPropsType = {\r\n  name: string;\r\n  onClick: any;\r\n  disabled?: boolean;\r\n};\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n  return (\r\n    <button\r\n      className={styles.button}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import { localStorageService } from \"../helpers/localStorageService\";\r\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\n\r\nconst useLocalStorage = <T>(\r\n  key: string,\r\n  initialValue: T\r\n): [T, Dispatch<SetStateAction<T>>] => {\r\n  const initialiazeState = () => {\r\n    const localData = localStorageService.getItem<T>(key, initialValue);\r\n    return localData;\r\n  };\r\n\r\n  const [storedValue, setStoredValue] = useState<T>(initialiazeState);\r\n\r\n  useEffect(() => {\r\n    setStoredValue(initialiazeState);\r\n  }, [key]);\r\n\r\n  useEffect(() => {\r\n    localStorageService.setItem(key, storedValue);\r\n  }, [storedValue]);\r\n\r\n  return [storedValue, setStoredValue];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import styles from \"./Select.module.scss\";\r\n\r\ntype OptionValue = string | number;\r\n\r\ntype Option<T extends OptionValue> = {\r\n  value: T;\r\n  label: string;\r\n};\r\n\r\ntype SelectProps<T extends OptionValue> = {\r\n  options: Option<T>[];\r\n  value: T;\r\n  onChange: (value: string) => void;\r\n  name?: string;\r\n};\r\nconst Select = <T extends OptionValue>(props: SelectProps<T>) => {\r\n  const handleOnChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    props.onChange(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <label className={styles.select_label}>\r\n      {props.name}\r\n      <select\r\n        className={styles.select}\r\n        value={props.value}\r\n        onChange={handleOnChange}\r\n      >\r\n        {props.options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameboard_item_div\":\"GameboardItem_gameboard_item_div__3929z\",\"cross\":\"GameboardItem_cross__x8R52\",\"circle\":\"GameboardItem_circle__1bNu0\",\"winner\":\"GameboardItem_winner__1Rvtl\",\"draw\":\"GameboardItem_draw__Tx4YD\"};","class LocalStorageService {\r\n  setItem(key: string, value: any): void {\r\n    localStorage.setItem(key, JSON.stringify({ value }));\r\n  }\r\n\r\n  getItem<T>(key: string): T | null;\r\n  getItem<T>(key: string, otherwise: T): T;\r\n  getItem<T>(key: string, otherwise?: T): T | null {\r\n    const data: string | null = localStorage.getItem(key);\r\n    if (data !== null) {\r\n      return JSON.parse(data).value;\r\n    }\r\n\r\n    if (otherwise) {\r\n      return otherwise;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const localStorageService = new LocalStorageService();\r\n","import { ReactNode } from \"react\";\r\nimport styles from \"./AbsoluteWrapper.module.scss\";\r\n\r\ntype AbsoluteWrapperProps = {\r\n  children: ReactNode;\r\n};\r\n\r\nconst AbsoluteWrapper = (props: AbsoluteWrapperProps) => {\r\n  return <div className={styles.absolute_wrap_div}>{props.children}</div>;\r\n};\r\n\r\nexport default AbsoluteWrapper;\r\n","import { useEffect } from \"react\";\r\nimport styles from \"./InputNumber.module.scss\";\r\n\r\ntype InputNumberPropsType = {\r\n  value: number;\r\n  onChange: (value: number) => void;\r\n  min: number;\r\n  max: number;\r\n  step: number;\r\n  name?: string;\r\n};\r\n\r\nconst InputNumber = (props: InputNumberPropsType) => {\r\n  useEffect(() => {\r\n    let inputNumber = props.value;\r\n\r\n    if (inputNumber > props.max || inputNumber < props.min) {\r\n      inputNumber = inputNumber > props.max ? props.max : props.min;\r\n      const timeout = setTimeout(() => {\r\n        props.onChange(inputNumber);\r\n      }, 200);\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  }, [props.value]);\r\n\r\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const inputNumber = +e.currentTarget.value;\r\n    props.onChange(inputNumber);\r\n  };\r\n\r\n  return (\r\n    <label className={styles.input_label}>\r\n      {props.name}\r\n      <input\r\n        className={styles.input}\r\n        type=\"number\"\r\n        value={props.value}\r\n        onChange={onChangeHandler}\r\n        min={props.min}\r\n        max={props.max}\r\n        step={props.step}\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default InputNumber;\r\n","\r\nimport styles from \"./GameboardItem.module.scss\";\r\nimport { CellKind } from \"../../../types/cellKind\";\r\n\r\ntype GameboardItemProps = {\r\n  cellFill: CellKind;\r\n  index: number;\r\n  winCombination: number[] | undefined;\r\n  clickHandler: (index: number) => void;\r\n};\r\n\r\nconst GameboardItem = (props: GameboardItemProps) => {\r\n  const onClickHandler = () => {\r\n    if (props.cellFill !== CellKind.Empty) return;\r\n    props.clickHandler(props.index);\r\n  };\r\n\r\n  let style = styles.empty;\r\n\r\n  if (props.cellFill === CellKind.Circle) {\r\n    style = styles.circle;\r\n  }\r\n\r\n  if (props.cellFill === CellKind.Cross) {\r\n    style = styles.cross;\r\n  }\r\n\r\n  if (props.winCombination && props.winCombination.includes(props.index)) {\r\n    style = `${style} ${styles.winner}`;\r\n  }\r\n\r\n  if (props.winCombination && !props.winCombination.length) {\r\n    style = `${style} ${styles.draw}`;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={onClickHandler}\r\n      className={`${styles.gameboard_item_div} ${style}`}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default GameboardItem;\r\n","import styles from \"./Gameboard.module.scss\";\r\nimport { CellKind } from \"../../types/cellKind\";\r\nimport GameboardItem from \"./GameboardItem/GameboardItem\";\r\n\r\ntype GameboardProps = {\r\n  gameState: CellKind[];\r\n  winCombination: number[] | undefined;\r\n  clickHandler: (index: number) => void;\r\n};\r\n\r\nconst Gameboard = (props: GameboardProps) => {\r\n  const gridColumns = Math.sqrt(props.gameState.length);\r\n  return (\r\n    <div\r\n      className={styles.gameboard_div}\r\n      style={{\r\n        gridTemplateColumns: `repeat(${gridColumns}, 1fr)`,\r\n        gridTemplateRows: `repeat(${gridColumns}, 1fr)`,\r\n      }}\r\n    >\r\n      {props.gameState.map((item, index) => {\r\n        return (\r\n          <GameboardItem\r\n            key={index}\r\n            index={index}\r\n            cellFill={item}\r\n            clickHandler={props.clickHandler}\r\n            winCombination={props.winCombination}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gameboard;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DropdownMenuItem_item__3Ag1i\",\"active\":\"DropdownMenuItem_active__3gaGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown_menu\":\"DropdownMenu_dropdown_menu__3AN9h\",\"dropdown_menu_ul\":\"DropdownMenu_dropdown_menu_ul__z1JGj\",\"dropdown_menu_p\":\"DropdownMenu_dropdown_menu_p__nFtxK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"simulation_page\":\"SimulationPage_simulation_page__3PNR_\",\"simulation_page_grid_div\":\"SimulationPage_simulation_page_grid_div__48Jlf\",\"select\":\"SimulationPage_select__3uCKV\",\"simulation_pie_div\":\"SimulationPage_simulation_pie_div__2ffc_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__3MM1D\",\"pagination_grid_div\":\"Pagination_pagination_grid_div__yDBJL\",\"pagination_flex_div\":\"Pagination_pagination_flex_div__3ekop\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1d0oY\",\"navbar_ul\":\"Navbar_navbar_ul__l91T-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_item\":\"NavbarItem_nav_item__3xXER\",\"nav_item_button\":\"NavbarItem_nav_item_button__24DG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homepage\":\"HomePage_homepage__1klUk\",\"homepage_div_gameboard\":\"HomePage_homepage_div_gameboard__2J9Pt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select_label\":\"Select_select_label__AsInw\",\"select\":\"Select_select__23rDm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"simulated_game\":\"SimulatedGame_simulated_game__2fQgm\",\"simulated_game_gameboard_div\":\"SimulatedGame_simulated_game_gameboard_div__1E42G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_label\":\"InputNumber_input_label__K_elD\",\"input\":\"InputNumber_input__3KllJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"Dropdown_dropdown__21DRP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameboard_div\":\"Gameboard_gameboard_div__3l_Co\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"absolute_wrap_div\":\"AbsoluteWrapper_absolute_wrap_div__2RbBF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aivsai_div\":\"AIvsAI_aivsai_div__kB9s7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3NkHr\"};","import styles from \"./SimulationPage.module.scss\";\r\nimport React, { useState } from \"react\";\r\nimport Pagination from \"./simulation-page-components/pagination/Pagination\";\r\nimport AbsoluteWrapper from \"../../components/absolute-wrapper/AbsoluteWrapper\";\r\nimport { ReturnTypeSimulate } from \"../../logic/simulate\";\r\nimport Button from \"../../components/atoms/button/Button\";\r\nimport InputNumber from \"../../components/atoms/input-number/InputNumber\";\r\nimport Select from \"../../components/atoms/select/Select\";\r\nimport Loading from \"../../components/atoms/loading/Loading\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport { wrap } from \"comlink\";\r\nimport { PieChart } from \"react-minimal-pie-chart\";\r\nimport { CellKind } from \"../../types/cellKind\";\r\nimport {\r\n  useHistory,\r\n  useRouteMatch,\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\n\r\nconst numberInput = {\r\n  min: 1,\r\n  max: 50,\r\n  step: 1,\r\n};\r\n\r\nconst options = [\r\n  { value: \"random\", label: \"RandomAI\" },\r\n  { value: \"miniMax\", label: \"MiniMax\" },\r\n];\r\n\r\nconst SimulationPage = () => {\r\n  const [simulatedGames, setSimulatedGames] =\r\n    useLocalStorage<null | ReturnTypeSimulate>(\"simGame\", null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [inputsState, setInputsState] = useLocalStorage(\"inputState\", {\r\n    circleAi: options[0].value,\r\n    crossAi: options[0].value,\r\n    number: numberInput.min,\r\n  });\r\n  let { pathname } = useLocation();\r\n  let { path } = useRouteMatch();\r\n  let history = useHistory();\r\n\r\n  const onClickHandler = async () => {\r\n    if (isLoading) return;\r\n    setIsLoading(true);\r\n    const worker = new Worker(\"../../worker\", {\r\n      name: \"simulateWorker\",\r\n      type: \"module\",\r\n    });\r\n    const { simulate } = wrap<import(\"../../worker\").SimulateWorker>(worker);\r\n    const games = await simulate(\r\n      inputsState.number,\r\n      inputsState.circleAi,\r\n      inputsState.crossAi\r\n    );\r\n    setSimulatedGames(games);\r\n    setIsLoading(false);\r\n    history.push(`${path}/1`);\r\n  };\r\n\r\n  const selectCircleAi = (value: string) => {\r\n    setInputsState((prevState) => {\r\n      return { ...prevState, circleAi: value };\r\n    });\r\n  };\r\n\r\n  const selectCrossAi = (value: string) => {\r\n    setInputsState((prevState) => {\r\n      return { ...prevState, crossAi: value };\r\n    });\r\n  };\r\n\r\n  const changeNumber = (value: number) => {\r\n    setInputsState((prevState) => {\r\n      return { ...prevState, number: value };\r\n    });\r\n  };\r\n\r\n  const showHideGames = () => {\r\n    if (pathname === path) {\r\n      history.push(`${path}/1`);\r\n      return;\r\n    }\r\n\r\n    history.push(`${path}`);\r\n  };\r\n\r\n  let data: [number, number, number];\r\n\r\n  if (simulatedGames) {\r\n    data = simulatedGames.reduce<[number, number, number]>(\r\n      (resArray, game) => {\r\n        if (game.winner === CellKind.Empty) {\r\n          resArray[0]++;\r\n        }\r\n        if (game.winner === CellKind.Circle) {\r\n          resArray[1]++;\r\n        }\r\n        if (game.winner === CellKind.Cross) {\r\n          resArray[2]++;\r\n        }\r\n        return resArray;\r\n      },\r\n      [0, 0, 0]\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AbsoluteWrapper>\r\n      <div className={styles.simulation_page}>\r\n        <div className={styles.simulation_page_grid_div}>\r\n          <Select\r\n            options={options}\r\n            value={inputsState.circleAi}\r\n            onChange={selectCircleAi}\r\n            name=\"Circle AI:\"\r\n          />\r\n          <Select\r\n            options={options}\r\n            value={inputsState.crossAi}\r\n            onChange={selectCrossAi}\r\n            name=\"Cross AI:\"\r\n          />\r\n          <InputNumber\r\n            min={numberInput.min}\r\n            max={numberInput.max}\r\n            step={numberInput.step}\r\n            value={inputsState.number}\r\n            onChange={changeNumber}\r\n            name=\"Number of simulation:\"\r\n          />\r\n          <Button onClick={onClickHandler} name=\"Simulate\" />\r\n        </div>\r\n        {isLoading && <Loading name=\"SIMULATING...\" />}\r\n        {data!! && (\r\n          <React.Fragment>\r\n            <div className={styles.simulation_pie_div}>\r\n              <PieChart\r\n                data={[\r\n                  { title: \"Draw\", value: data[0], color: \"#E9B5B4\" },\r\n                  { title: \"Circle\", value: data[1], color: \"#A5A6BC\" },\r\n                  { title: \"Cross\", value: data[2], color: \"#BBD0BA\" },\r\n                ]}\r\n                label={({ dataEntry }) => {\r\n                  if (dataEntry.value > 0) {\r\n                    return `${dataEntry.title} ${dataEntry.value}`;\r\n                  }\r\n                }}\r\n                labelStyle={{\r\n                  fontSize: \"0.35rem\",\r\n                  fontFamily: \"inherit\",\r\n                }}\r\n                animate={true}\r\n                labelPosition={50}\r\n              />\r\n            </div>\r\n            <Button\r\n              name={path === pathname ? \"Show Games\" : \"Hide Games\"}\r\n              onClick={showHideGames}\r\n            />\r\n          </React.Fragment>\r\n        )}\r\n        <Switch>\r\n          <Route\r\n            path={`${path}/:pageNum`}\r\n            render={(props) => (\r\n              <Pagination {...props} path={path} games={simulatedGames} />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    </AbsoluteWrapper>\r\n  );\r\n};\r\n\r\nexport default SimulationPage;\r\n","import styles from \"./Loading.module.scss\";\r\nimport { useSprings, animated, config } from \"@react-spring/web\";\r\n\r\ntype LoadingProps = {\r\n  name: string;\r\n};\r\n\r\nconst Loading = (props: LoadingProps) => {\r\n  const text = props.name.split(\"\");\r\n\r\n  const base = {\r\n    loop: true,\r\n    config: config.wobbly,\r\n    from: { transform: \"translate3d(0,0,0)\", opacity: 1, color: \"#D46615\" },\r\n    to: [\r\n      { transform: \"translate3d(0,-40px,0)\", opacity: 0, color: \"#7BFF33\" },\r\n      { transform: \"translate3d(0,0,0)\", opacity: 1, color: \"#D46615\" },\r\n    ],\r\n  };\r\n\r\n  const springs = useSprings(\r\n    text.length,\r\n    text.map((t, i) => ({ ...base, delay: 10 * i }))\r\n  );\r\n\r\n  return (\r\n    <div className={styles.loading_div}>\r\n      {springs.map((s, i) => {\r\n        return (\r\n          <animated.div key={`char${i}`} style={s}>\r\n            {text[i] === \" \" ? <>&nbsp;</> : text[i]}\r\n          </animated.div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading_div\":\"Loading_loading_div__HqqQw\"};","import styles from \"./SimulatedGame.module.scss\";\r\nimport { CellKind } from \"../../../../types/cellKind\";\r\nimport Gameboard from \"../../../../components/Gameboard/Gameboard\";\r\n\r\ntype SimulatedGamePropsType = {\r\n  gameState: CellKind[];\r\n  winCombination: number[] | undefined;\r\n  index: number;\r\n  winner: CellKind;\r\n};\r\n\r\nconst SimulatedGame = (props: SimulatedGamePropsType) => {\r\n  let result = `${props.winner} won`;\r\n\r\n  if (props.winner === CellKind.Empty) {\r\n    result = \"Draw\";\r\n  }\r\n\r\n  return (\r\n    <div className={styles.simulated_game}>\r\n      <h1>{`Game: ${props.index}`}</h1>\r\n      <h2>{`Result: ${result}`}</h2>\r\n      <div className={styles.simulated_game_gameboard_div}>\r\n        <Gameboard\r\n          gameState={props.gameState}\r\n          winCombination={props.winCombination}\r\n          clickHandler={() => {}}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimulatedGame;\r\n","import styles from \"./Pagination.module.scss\";\r\nimport SimulatedGame from \"../simulated-game/SimulatedGame\";\r\nimport Button from \"../../../../components/atoms/button/Button\";\r\nimport InputNumber from \"../../../../components/atoms/input-number/InputNumber\";\r\nimport useLocalStorage from \"../../../../hooks/useLocalStorage\";\r\nimport { ReturnTypeSimulate } from \"../../../../logic/simulate\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\n\r\ntype PaginationPropsType = {\r\n  path: string;\r\n  games: ReturnTypeSimulate | null;\r\n};\r\n\r\nconst Pagination = (props: PaginationPropsType) => {\r\n  const [page, setPage] = useState(1);\r\n  const [howMany, setHowMany] = useLocalStorage(\"howMany\", {\r\n    inputValue: 9,\r\n    pasedValue: 9,\r\n  });\r\n  let history = useHistory();\r\n  let { pageNum } = useParams<{ pageNum: string }>();\r\n\r\n  useEffect(() => {\r\n    if (!props.games) {\r\n      history.replace(props.path);\r\n    }\r\n  }, [props.games]);\r\n\r\n  useEffect(() => {\r\n    if (howMany.pasedValue !== howMany.inputValue) {\r\n      const timeout = setTimeout(() => {\r\n        setHowMany((prevState) => {\r\n          return { ...prevState, pasedValue: prevState.inputValue };\r\n        });\r\n        history.push(`${props.path}/1`);\r\n      }, 500);\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  }, [howMany.inputValue]);\r\n\r\n  let max = 1;\r\n  const startIndex = (page - 1) * howMany.pasedValue;\r\n  const endIndex = page * howMany.pasedValue;\r\n\r\n  let array: ReturnTypeSimulate = [];\r\n\r\n  if (props.games) {\r\n    max = Math.ceil(props.games.length / howMany.pasedValue);\r\n    array = props.games.slice(startIndex, endIndex);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isNaN(+pageNum) || +pageNum < 1) {\r\n      history.push(`${props.path}/1`);\r\n      return;\r\n    }\r\n    if (+pageNum > max) {\r\n      history.push(`${props.path}/${max}`);\r\n      return;\r\n    }\r\n\r\n    setPage(+pageNum);\r\n  }, [pageNum]);\r\n\r\n  const onChange = (value: number) => {\r\n    setHowMany((prevState) => {\r\n      return { ...prevState, inputValue: value };\r\n    });\r\n  };\r\n\r\n  const clickHandler = (index: number) => {\r\n    history.push(`${props.path}/${index}`);\r\n  };\r\n\r\n  const prevPage = () => {\r\n    history.push(`${props.path}/${page - 1}`);\r\n  };\r\n\r\n  const nextPage = () => {\r\n    history.push(`${props.path}/${page + 1}`);\r\n  };\r\n\r\n  const buttons = [];\r\n\r\n  for (let i = 1; i <= max; i++) {\r\n    let button = (\r\n      <Button\r\n        onClick={() => [clickHandler(i)]}\r\n        key={i}\r\n        disabled={page === i}\r\n        name={`${i}`}\r\n      />\r\n    );\r\n    buttons.push(button);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.pagination}>\r\n      <InputNumber\r\n        min={9}\r\n        max={15}\r\n        step={1}\r\n        value={howMany.inputValue}\r\n        onChange={onChange}\r\n        name={\"Numbers of games per page\"}\r\n      />\r\n      <div className={styles.pagination_grid_div}>\r\n        {array.map((game, index) => {\r\n          return (\r\n            <SimulatedGame\r\n              gameState={game.gameState}\r\n              winCombination={game.winCombination}\r\n              index={index + 1 + startIndex}\r\n              winner={game.winner}\r\n              key={index + startIndex}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <div className={styles.pagination_flex_div}>\r\n        <Button onClick={prevPage} disabled={page === 1} name={`<<`} />\r\n        {buttons}\r\n        <Button onClick={nextPage} disabled={page === max} name={`>>`} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","module.exports = __webpack_public_path__ + \"static/js/simulateWorker.e09140a6.chunk.worker.js\"","import { GameModesType } from \"../types/game-mode-type\";\r\n\r\nexport type GameModeInfoType = {\r\n  [Mode in GameModesType]: string;\r\n};\r\n\r\nexport const GameModeInfo: GameModeInfoType = {\r\n  PvsP: \"Play against a friend on 3x3 to 5x5 board\",\r\n  AIvsAI: \"Watch AI play against other AI\",\r\n  Easy: \"Play against random AI. You can undo your moves\",\r\n  Hard: \"Play against unbeatable AI\",\r\n};\r\n","import React, { ReactNode, useState, useEffect } from \"react\";\r\nimport { GameModesType } from \"../types/game-mode-type\";\r\nimport { localStorageService } from \"../helpers/localStorageService\";\r\n\r\n\r\nexport type GameModeContextType = {\r\n  gameMode: GameModesType;\r\n  setGameMode: (gameMode: GameModesType) => void;\r\n};\r\n\r\nconst localStorageKey = \"gameMode\";\r\n\r\nconst initialGameMode = localStorageService.getItem<GameModesType>(\r\n  localStorageKey,\r\n  \"Easy\"\r\n);\r\n\r\nexport const GameModeContext = React.createContext({\r\n  gameMode: initialGameMode,\r\n  setGameMode: (gameMode: GameModesType) => {},\r\n});\r\n\r\ntype GameModeContextProviderType = {\r\n  children: ReactNode;\r\n};\r\n\r\nconst GameModeContextProvider = (props: GameModeContextProviderType) => {\r\n  const [gameMode, setGameMode] = useState(initialGameMode);\r\n\r\n  useEffect(() => {\r\n    localStorageService.setItem(localStorageKey, gameMode);\r\n  }, [gameMode]);\r\n\r\n  const changeGameMode = (gameMode: GameModesType) => {\r\n    setGameMode(gameMode);\r\n  };\r\n\r\n  return (\r\n    <GameModeContext.Provider\r\n      value={{ gameMode: gameMode, setGameMode: changeGameMode }}\r\n    >\r\n      {props.children}\r\n    </GameModeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default GameModeContextProvider;\r\n","import styles from \"./DropdownMenuItem.module.scss\";\r\n\r\ntype DropdownMenuItemProps = {\r\n  name: any;\r\n  onMouseEnterHandler: () => void;\r\n  onClickHandler: () => void;\r\n  isActive?: boolean;\r\n};\r\n\r\nconst DropdownMenuItem = (props: DropdownMenuItemProps) => {\r\n  const style = props.isActive\r\n    ? `${styles.item} ${styles.active}`\r\n    : styles.item;\r\n\r\n  return (\r\n    <div\r\n      className={style}\r\n      onMouseEnter={() => {\r\n        props.onMouseEnterHandler();\r\n      }}\r\n      onClick={() => {\r\n        props.onClickHandler();\r\n      }}\r\n    >\r\n      {props.name}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropdownMenuItem;\r\n","import styles from \"./DropdownMenu.module.scss\";\r\nimport { ReactNode } from \"react\";\r\n\r\ntype DropdownMenuPropsType = {\r\n  info: string;\r\n  children: ReactNode;\r\n};\r\n\r\nconst DropdownMenu = (props: DropdownMenuPropsType) => {\r\n  return (\r\n    <div className={styles.dropdown_menu}>\r\n      <ul className={styles.dropdown_menu_ul}>{props.children}</ul>\r\n      <p className={styles.dropdown_menu_p}>{props.info}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropdownMenu;\r\n","import styles from \"./Dropdown.module.scss\";\r\n\r\ntype DropdownProps = {\r\n  children: JSX.Element;\r\n};\r\n\r\nconst Dropdown = (props: DropdownProps) => {\r\n  return <div className={styles.dropdown}>{props.children}</div>;\r\n};\r\n\r\nexport default Dropdown;\r\n","import styles from \"./NavbarItem.module.scss\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype NavbarItemProps = {\r\n  name: string;\r\n  route: string;\r\n  children: JSX.Element;\r\n};\r\n\r\nconst NavbarItem = (props: NavbarItemProps) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const onMouseEnterHandler = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const onMouseLeaveHandler = () => {\r\n    setOpen(false);\r\n  };\r\n  return (\r\n    <li\r\n      className={styles.nav_item}\r\n      onMouseEnter={onMouseEnterHandler}\r\n      onMouseLeave={onMouseLeaveHandler}\r\n    >\r\n      <Link to={props.route} className={styles.nav_item_button}>\r\n        {props.name}\r\n      </Link>\r\n      {open && props.children}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NavbarItem;\r\n","import styles from \"./Navbar.module.scss\";\r\nimport { useState, useContext } from \"react\";\r\nimport { GameModeInfo } from \"../../logic/game-mode-info\";\r\nimport { GameModeContext } from \"../../context/gameMode-context\";\r\nimport DropdownMenuItem from \"./dropdown-menu/dropdown-menu-item/DropdownMenuItem\";\r\nimport DropdownMenu from \"./dropdown-menu/DropdownMenu\";\r\nimport Dropdown from \"./dropdown/Dropdown\";\r\nimport NavbarItem from \"./navbar-items/NavbarItem\";\r\nimport { simulationInfo } from \"../../logic/simulationInfo\";\r\nimport { typedObjectKeys } from \"../../helpers/typedObjectKeys\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\n\r\nconst gameModeInfoKeys = typedObjectKeys(GameModeInfo);\r\n\r\nconst Navbar = () => {\r\n  const [info, setInfo] = useState(GameModeInfo.PvsP);\r\n  const { setGameMode, gameMode } = useContext(GameModeContext);\r\n  const history = useHistory();\r\n  let { pathname } = useLocation();\r\n  return (\r\n    <nav className={styles.navbar}>\r\n      <ul className={styles.navbar_ul}>\r\n        <NavbarItem name=\"Game Modes\" route=\"/\">\r\n          <DropdownMenu info={info}>\r\n            {gameModeInfoKeys.map((key) => {\r\n              return (\r\n                <DropdownMenuItem\r\n                  name={key}\r\n                  onMouseEnterHandler={() => {\r\n                    setInfo(GameModeInfo[key]);\r\n                  }}\r\n                  key={key}\r\n                  isActive={key === gameMode}\r\n                  onClickHandler={() => {\r\n                    if (gameMode === key && pathname === \"/\") return;\r\n                    history.push(\"/\");\r\n                    setTimeout(() => {\r\n                      setGameMode(key);\r\n                    }, 200);\r\n                  }}\r\n                />\r\n              );\r\n            })}\r\n          </DropdownMenu>\r\n        </NavbarItem>\r\n        <NavbarItem name=\"Simulate\" route=\"/sim\">\r\n          <Dropdown>\r\n            <p>{simulationInfo}</p>\r\n          </Dropdown>\r\n        </NavbarItem>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","export const typedObjectKeys = <T>(object: T) => {\r\n  type Keys = keyof typeof object;\r\n  let k: Keys;\r\n  let arr: Keys[] = [];\r\n  for (k in object) {\r\n    arr = [...arr, k];\r\n  }\r\n  return arr;\r\n};\r\n","export const simulationInfo = \"Simulate up to 50 games of AIvsAI\";\r\n","import { CellKind } from \"../types/cellKind\";\r\n\r\n\r\nexport const checkForWinner = (gameState: CellKind[]) => {\r\n  const lengthSqrt = Math.sqrt(gameState.length);\r\n\r\n  const rowSet = new Set<CellKind>();\r\n  const rowKeys: number[] = [];\r\n\r\n  const columnSet = new Set<CellKind>();\r\n  const columnKeys: number[] = [];\r\n\r\n  const diagonalSet = new Set<CellKind>();\r\n  const diagonalKeys: number[] = [];\r\n\r\n  const checkForDrawSet = new Set<CellKind>();\r\n\r\n  for (let i = 0; i < lengthSqrt; i++) {\r\n    let indexDiagonal = i;\r\n    for (let j = 0; j < lengthSqrt; j++) {\r\n      let indexRow = i * lengthSqrt + j;\r\n      let indexColumn = i + lengthSqrt * j;\r\n      rowSet.add(gameState[indexRow]);\r\n      rowKeys.push(indexRow);\r\n\r\n      columnSet.add(gameState[indexColumn]);\r\n      columnKeys.push(indexColumn);\r\n\r\n      checkForDrawSet.add(gameState[indexRow]);\r\n\r\n      if (i === 0) {\r\n        diagonalSet.add(gameState[indexDiagonal]);\r\n        diagonalKeys.push(indexDiagonal);\r\n        indexDiagonal += lengthSqrt + 1;\r\n      }\r\n\r\n      if (i === lengthSqrt - 1) {\r\n        diagonalSet.add(gameState[indexDiagonal]);\r\n        diagonalKeys.push(indexDiagonal);\r\n        indexDiagonal += lengthSqrt - 1;\r\n      }\r\n    }\r\n\r\n    if (rowSet.size === 1 && !rowSet.has(CellKind.Empty)) {\r\n      const winner: CellKind = rowSet.values().next().value;\r\n      return { winner: winner, winCombination: rowKeys };\r\n    }\r\n\r\n    if (columnSet.size === 1 && !columnSet.has(CellKind.Empty)) {\r\n      const winner: CellKind = columnSet.values().next().value;\r\n      return { winner: winner, winCombination: columnKeys };\r\n    }\r\n\r\n    if (diagonalSet.size === 1 && !diagonalSet.has(CellKind.Empty)) {\r\n      const winner: CellKind = diagonalSet.values().next().value;\r\n      return { winner: winner, winCombination: diagonalKeys };\r\n    }\r\n\r\n    rowSet.clear();\r\n    rowKeys.length = 0;\r\n\r\n    columnSet.clear();\r\n    columnKeys.length = 0;\r\n\r\n    diagonalSet.clear();\r\n    diagonalKeys.length = 0;\r\n  }\r\n\r\n  if (!checkForDrawSet.has(CellKind.Empty)) {\r\n    return { winner: CellKind.Empty, winCombination: [] };\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport type CheckForWinnerReturnType = ReturnType<typeof checkForWinner>;\r\n","import { CellKind } from \"../types/cellKind\";\r\nimport { checkForWinner } from \"./checkForWinner\";\r\n\r\nconst getRandomIntInclusive = (min: number, max: number) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nconst getEmptySpotsArray = (gameState: CellKind[]) => {\r\n  return gameState.reduce<number[]>((prevVal, curVal, index) => {\r\n    if (curVal === CellKind.Empty) {\r\n      prevVal.push(index);\r\n      return prevVal;\r\n    }\r\n    return prevVal;\r\n  }, []);\r\n};\r\n\r\nexport const randomAi = (gameState: CellKind[]) => {\r\n  const emptySpotsArray = getEmptySpotsArray(gameState);\r\n\r\n  const index = getRandomIntInclusive(0, emptySpotsArray.length - 1);\r\n\r\n  return emptySpotsArray[index];\r\n};\r\n\r\nexport const miniMaxScope = (\r\n  gameState: CellKind[],\r\n  aiPlayer: CellKind,\r\n  opponent: CellKind\r\n): number => {\r\n  const miniMax = (\r\n    gameState: CellKind[],\r\n    player: CellKind,\r\n    memo: any = {}\r\n  ): { score: number; index: number } => {\r\n    const target = JSON.stringify(gameState);\r\n\r\n    if (target in memo) {\r\n      return memo[target];\r\n    }\r\n\r\n    const emptySpotsArray = getEmptySpotsArray(gameState);\r\n\r\n    const winner = checkForWinner(gameState);\r\n\r\n    if (winner) {\r\n      if (winner.winner === aiPlayer) {\r\n        const result = { score: 10, index: -1 };\r\n        memo[target] = result;\r\n        return result;\r\n      }\r\n\r\n      if (winner.winner === opponent) {\r\n        const result = { score: -10, index: -1 };\r\n        memo[target] = result;\r\n        return result;\r\n      }\r\n\r\n      if (winner.winner === CellKind.Empty) {\r\n        const result = { score: 0, index: -1 };\r\n        memo[target] = result;\r\n        return result;\r\n      }\r\n    }\r\n\r\n    const moves: { index: number; score: number }[] = emptySpotsArray.map(\r\n      (item) => {\r\n        const move: { index: number; score: number } = {\r\n          index: item,\r\n          score: 0,\r\n        };\r\n\r\n        const currentGameState = gameState.map((item, index) => {\r\n          if (index === move.index) {\r\n            return player;\r\n          }\r\n          return item;\r\n        });\r\n\r\n        if (player === aiPlayer) {\r\n          move.score = miniMax(currentGameState, opponent).score;\r\n        }\r\n\r\n        if (player === opponent) {\r\n          move.score = miniMax(currentGameState, aiPlayer).score;\r\n        }\r\n\r\n        return move;\r\n      }\r\n    );\r\n\r\n    let bestMove = moves[0];\r\n\r\n    if (player === aiPlayer) {\r\n      bestMove = moves.reduce((item, curValue) => {\r\n        return item.score > curValue.score ? item : curValue;\r\n      }, moves[0]);\r\n    }\r\n\r\n    if (player === opponent) {\r\n      bestMove = moves.reduce((item, curValue) => {\r\n        return item.score < curValue.score ? item : curValue;\r\n      }, moves[0]);\r\n    }\r\n    memo[target] = bestMove;\r\n    return bestMove;\r\n  };\r\n\r\n  return miniMax(gameState, aiPlayer).index;\r\n};\r\n","export const bindTrailingArgs = <T extends (...args: any) => ReturnType<T>>(\r\n  func: T,\r\n  ...boundArgs: Parameters<T>[number][]\r\n) => {\r\n  return (...args: Parameters<T>[number][]) => {\r\n    const allArgs = [...args, ...boundArgs];\r\n    return func(...allArgs);\r\n  };\r\n};\r\n","import styles from \"./AIvsAI.module.scss\";\r\nimport Select from \"../../../../components/atoms/select/Select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { randomAi, miniMaxScope } from \"../../../../logic/AI\";\r\nimport Button from \"../../../../components/atoms/button/Button\";\r\nimport { bindTrailingArgs } from \"../../../../helpers/bindTrailingArgs\";\r\nimport { CellKind } from \"../../../../types/cellKind\";\r\n\r\nconst options = [\r\n  { value: \"random\", label: \"RandomAI\" },\r\n  { value: \"miniMax\", label: \"MiniMax\" },\r\n];\r\n\r\ntype AIvsAIpropsType = {\r\n  turn: CellKind;\r\n  moveAI: (aiFunc: (gameState: CellKind[]) => number) => void;\r\n  isWin: boolean;\r\n};\r\n\r\nconst AIvsAI = ({ isWin, ...props }: AIvsAIpropsType) => {\r\n  const [circleAi, setCircleAi] = useState(options[0].value);\r\n  const [crossAi, setCrossAi] = useState(options[0].value);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isPlaying) {\r\n      const timeOut = setTimeout(() => {\r\n        console.log(\"time\");\r\n        let aiFunc = randomAi;\r\n        if (props.turn === CellKind.Circle) {\r\n          if (circleAi === \"miniMax\") {\r\n            aiFunc = bindTrailingArgs(\r\n              miniMaxScope,\r\n              CellKind.Circle,\r\n              CellKind.Cross\r\n            );\r\n          }\r\n        }\r\n\r\n        if (props.turn === CellKind.Cross) {\r\n          if (crossAi === \"miniMax\") {\r\n            aiFunc = bindTrailingArgs(\r\n              miniMaxScope,\r\n              CellKind.Cross,\r\n              CellKind.Circle\r\n            );\r\n          }\r\n        }\r\n        console.log(aiFunc);\r\n        props.moveAI(aiFunc);\r\n      }, 400);\r\n      return () => {\r\n        clearTimeout(timeOut);\r\n      };\r\n    }\r\n  }, [isPlaying, props, circleAi, crossAi]);\r\n\r\n  useEffect(() => {\r\n    if (isWin) {\r\n      setIsPlaying(false);\r\n    }\r\n  }, [isWin]);\r\n\r\n  const selectCircleAi = (value: string) => {\r\n    setCircleAi(value);\r\n  };\r\n\r\n  const selectCrossAi = (value: string) => {\r\n    setCrossAi(value);\r\n  };\r\n\r\n  const onClickHandler = () => {\r\n    if (isPlaying) return;\r\n    setIsPlaying(true);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.aivsai_div}>\r\n      <Select\r\n        options={options}\r\n        value={circleAi}\r\n        onChange={selectCircleAi}\r\n        name=\"Circle AI: \"\r\n      />\r\n      <Select\r\n        options={options}\r\n        value={crossAi}\r\n        onChange={selectCrossAi}\r\n        name=\"Cross AI: \"\r\n      />\r\n      <Button onClick={onClickHandler} name=\"Play\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIvsAI;\r\n","import { useState } from \"react\";\r\nimport Select from \"../../../../components/atoms/select/Select\";\r\n\r\nconst options = [\r\n  { value: \"3\", label: \"3x3\" },\r\n  { value: \"4\", label: \"4x4\" },\r\n  { value: \"5\", label: \"5x5\" },\r\n];\r\n\r\ntype PvsPpropsType = {\r\n  onChange: (size: number) => void;\r\n  initialSize: number;\r\n};\r\n\r\nconst PvsP = (props: PvsPpropsType) => {\r\n  const [gridSize, setGridSize] = useState(props.initialSize.toString());\r\n\r\n  console.log(props.initialSize);\r\n\r\n  const onChange = (size: string) => {\r\n    setGridSize(size);\r\n    props.onChange(+size);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      value={gridSize}\r\n      onChange={onChange}\r\n      name=\"Size:\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default PvsP;\r\n","import { CellKind } from \"../types/cellKind\";\r\n\r\nexport const generateEmptyGameState = (size: number) => {\r\n  const length = size * size;\r\n  const gameState = [];\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    gameState.push(CellKind.Empty);\r\n  }\r\n\r\n  return gameState;\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { generateEmptyGameState } from \"../../../../helpers/generateEmptyGameState\";\r\nimport Button from \"../../../../components/atoms/button/Button\";\r\nimport useLocalStorage from \"../../../../hooks/useLocalStorage\";\r\nimport { randomAi } from \"../../../../logic/AI\";\r\nimport { CellKind } from \"../../../../types/cellKind\";\r\n\r\ntype EasyPropsType = {\r\n  gameState: CellKind[];\r\n  turn: CellKind;\r\n  moveAI: (index: number) => void;\r\n  changeState: (gameState: CellKind[]) => void;\r\n  isWin: boolean;\r\n};\r\n\r\nconst initialState = {\r\n  gameStates: [generateEmptyGameState(3)],\r\n  index: 0,\r\n};\r\n\r\nconst Easy = (props: EasyPropsType) => {\r\n  const [history, setHistory] = useLocalStorage(\"history\", initialState);\r\n\r\n  useEffect(() => {\r\n    if (props.isWin) {\r\n      setHistory(initialState);\r\n      return;\r\n    }\r\n\r\n    if (props.turn === CellKind.Cross) {\r\n      const timeout = setTimeout(() => {\r\n        const gameStateCopy = [...props.gameState];\r\n        const indexMove = randomAi(props.gameState);\r\n        gameStateCopy[indexMove] = CellKind.Cross;\r\n        setHistory((prevState) => {\r\n          let gameStates = [...prevState.gameStates];\r\n          let index = prevState.index;\r\n          if (index < gameStates.length - 1) {\r\n            gameStates = gameStates.slice(0, prevState.index + 1);\r\n            index = gameStates.length - 1;\r\n          }\r\n          index++;\r\n          return {\r\n            gameStates: [...gameStates, [...gameStateCopy]],\r\n            index: index,\r\n          };\r\n        });\r\n        props.moveAI(indexMove);\r\n      }, 300);\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  }, [props.turn, props.isWin]);\r\n\r\n  const undo = () => {\r\n    props.changeState(history.gameStates[history.index - 1]);\r\n    setHistory((prevState) => {\r\n      return { ...prevState, index: prevState.index - 1 };\r\n    });\r\n  };\r\n\r\n  const redo = () => {\r\n    props.changeState(history.gameStates[history.index + 1]);\r\n    setHistory((prevState) => {\r\n      return { ...prevState, index: prevState.index + 1 };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={redo}\r\n        disabled={history.index >= history.gameStates.length - 1 || props.isWin}\r\n        name=\"REDO\"\r\n      />\r\n      <Button\r\n        onClick={undo}\r\n        disabled={history.index <= 0 || props.isWin}\r\n        name=\"UNDO\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Easy;\r\n","import styles from \"./HomePage.module.scss\";\r\nimport { useState, useEffect, useContext, useCallback } from \"react\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport Gameboard from \"../../components/Gameboard/Gameboard\";\r\nimport AbsoluteWrapper from \"../../components/absolute-wrapper/AbsoluteWrapper\";\r\nimport AIvsAI from \"./home-page-components/AivsAi-mode/AivsAi\";\r\nimport PvsP from \"./home-page-components/PvsP-mode/PvsP\";\r\nimport Easy from \"./home-page-components/easy-mode/Easy\";\r\nimport Button from \"../../components/atoms/button/Button\";\r\nimport { GameModeContext } from \"../../context/gameMode-context\";\r\nimport { miniMaxScope } from \"../../logic/AI\";\r\nimport { bindTrailingArgs } from \"../../helpers/bindTrailingArgs\";\r\nimport {\r\n  checkForWinner,\r\n  CheckForWinnerReturnType,\r\n} from \"../../logic/checkForWinner\";\r\nimport { CellKind } from \"../../types/cellKind\";\r\nimport { generateEmptyGameState } from \"../../helpers/generateEmptyGameState\";\r\n\r\nlet initialState = {\r\n  turn: CellKind.Circle,\r\n  gameState: generateEmptyGameState(3),\r\n};\r\n\r\ntype GameboardState = typeof initialState;\r\n\r\nconst HomePage = () => {\r\n  const [win, setWin] = useState<CheckForWinnerReturnType | null>(null);\r\n  const { gameMode } = useContext(GameModeContext);\r\n  const [state, setState] = useLocalStorage<GameboardState>(\r\n    gameMode,\r\n    initialState\r\n  );\r\n\r\n  useEffect(() => {\r\n    const winner = checkForWinner(state.gameState);\r\n    if (winner || win) {\r\n      setWin(winner);\r\n    }\r\n  }, [state.gameState, gameMode]);\r\n\r\n  const move = useCallback(\r\n    (index: number) => {\r\n      if (win) return;\r\n      setState((prevState) => {\r\n        const changedGameboardState = [...prevState.gameState];\r\n\r\n        changedGameboardState[index] = prevState.turn;\r\n\r\n        let turn = CellKind.Circle;\r\n\r\n        if (prevState.turn === CellKind.Circle) {\r\n          turn = CellKind.Cross;\r\n        }\r\n\r\n        const curState: GameboardState = {\r\n          turn: turn,\r\n          gameState: changedGameboardState,\r\n        };\r\n        return curState;\r\n      });\r\n    },\r\n    [win]\r\n  );\r\n\r\n  const aiMove = (aiFunc: (gameState: CellKind[]) => number) => {\r\n    if (win) return;\r\n    const index = aiFunc(state.gameState);\r\n    move(index);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (gameMode === \"Hard\" && state.turn === CellKind.Cross) {\r\n      const timeout = setTimeout(() => {\r\n        const bindedMinimax = bindTrailingArgs(\r\n          miniMaxScope,\r\n          CellKind.Cross,\r\n          CellKind.Circle\r\n        );\r\n        aiMove(bindedMinimax);\r\n      }, 300);\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  }, [state.turn, gameMode]);\r\n\r\n  const humanMove = (index: number) => {\r\n    if (gameMode === \"AIvsAI\") return;\r\n    if (\r\n      (gameMode === \"Easy\" || gameMode === \"Hard\") &&\r\n      state.turn === CellKind.Cross\r\n    )\r\n      return;\r\n    move(index);\r\n  };\r\n\r\n  const restartState = () => {\r\n    setState((prevState) => {\r\n      return {\r\n        turn: CellKind.Circle,\r\n        gameState: generateEmptyGameState(\r\n          Math.sqrt(prevState.gameState.length)\r\n        ),\r\n      };\r\n    });\r\n    setWin(null);\r\n  };\r\n\r\n  const changeState = (gamestate: CellKind[]) => {\r\n    if (win) return;\r\n    setState({\r\n      turn: CellKind.Circle,\r\n      gameState: gamestate,\r\n    });\r\n  };\r\n\r\n  const changeGridSize = (size: number) => {\r\n    setState({ ...initialState, gameState: generateEmptyGameState(size) });\r\n    setWin(null);\r\n  };\r\n\r\n  let turn: string | CellKind = state.turn;\r\n\r\n  if (gameMode === \"Easy\" || gameMode === \"Hard\") {\r\n    if (state.turn === CellKind.Cross) {\r\n      turn = \"AI\";\r\n    }\r\n\r\n    if (state.turn === CellKind.Circle) {\r\n      turn = \"Your\";\r\n    }\r\n  }\r\n\r\n  let winText = \"Winner: \";\r\n\r\n  if (win) {\r\n    winText = winText + win.winner;\r\n    if (win.winner === CellKind.Empty) {\r\n      winText = \"Draw\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AbsoluteWrapper>\r\n      <div className={styles.homepage}>\r\n        {!win && <h1>{`${turn} turn`}</h1>}\r\n        {win && <h1>{winText}</h1>}\r\n        {gameMode === \"PvsP\" && (\r\n          <PvsP\r\n            onChange={changeGridSize}\r\n            initialSize={Math.sqrt(state.gameState.length)}\r\n          />\r\n        )}\r\n        {gameMode === \"AIvsAI\" && (\r\n          <AIvsAI turn={state.turn} moveAI={aiMove} isWin={win !== null} />\r\n        )}\r\n        {gameMode === \"Easy\" && (\r\n          <Easy\r\n            gameState={state.gameState}\r\n            turn={state.turn}\r\n            moveAI={move}\r\n            changeState={changeState}\r\n            isWin={win !== null}\r\n          />\r\n        )}\r\n        <div className={styles.homepage_div_gameboard}>\r\n          <Gameboard\r\n            gameState={state.gameState}\r\n            winCombination={win?.winCombination}\r\n            clickHandler={humanMove}\r\n          />\r\n        </div>\r\n        {win && <Button onClick={restartState} name=\"Restart\" />}\r\n      </div>\r\n    </AbsoluteWrapper>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\nimport { useTransition, config, animated } from \"@react-spring/web\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport HomePage from \"./pages/home-page/HomePage\";\nimport SimulationPage from \"./pages/simulation-page/SimulationPage\";\nimport { Switch, Route, useLocation } from \"react-router-dom\";\n\nconst App = () => {\n  const location = useLocation();\n  const transitions = useTransition(location, {\n    config: config.slow,\n    from: { opacity: 0, transform: \"translate(100%, 0)\" },\n    enter: { opacity: 1, transform: \"translate(0, 0)\" },\n    leave: { opacity: 0, transform: \"translate(-50%, 0)\" },\n  });\n\n  return (\n    <React.Fragment>\n      <Navbar />\n      {transitions((props, item) => (\n        <animated.div style={{ ...props }}>\n          <Switch location={item}>\n            <Route path=\"/sim\" component={SimulationPage} />\n            <Route path=\"/\" component={HomePage} />\n          </Switch>\n        </animated.div>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nimport GameModeContextProvider from \"./context/gameMode-context\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/tic-tac-toe\">\n      <GameModeContextProvider>\n        <App />\n      </GameModeContextProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}