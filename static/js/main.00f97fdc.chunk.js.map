{"version":3,"sources":["types/cellKind.ts","components/atoms/button/Button.tsx","components/atoms/select/Select.tsx","components/Gameboard/GameboardItem/GameboardItem.module.scss","pages/simulation-page/SimulationPage.module.scss","components/absolute-wrapper/AbsoluteWrapper.tsx","components/Gameboard/GameboardItem/GameboardItem.tsx","components/Gameboard/Gameboard.tsx","components/navbar/dropdown-menu/DropdownMenu.module.scss","components/navbar/Navbar.module.scss","components/navbar/navbar-items/NavbarItem.module.scss","pages/home-page/HomePage.module.scss","components/atoms/select/Select.module.scss","pages/simulation-page/simulation-page-components/simulated-game/SimulatedGame.module.scss","components/atoms/input-number/InputNumber.module.scss","components/navbar/dropdown-menu/dropdown-menu-item/DropdownMenuItem.module.scss","components/navbar/dropdown/Dropdown.module.scss","components/Gameboard/Gameboard.module.scss","components/absolute-wrapper/AbsoluteWrapper.module.scss","pages/home-page/home-page-components/AivsAi-mode/AIvsAI.module.scss","components/atoms/button/Button.module.scss","pages/simulation-page/SimulationPage.tsx","pages/simulation-page/simulation-page-components/simulated-game/SimulatedGame.tsx","components/atoms/input-number/InputNumber.tsx","components/atoms/loading/Loading.tsx","components/atoms/loading/Loading.module.scss","worker.ts","logic/game-mode-info.ts","helpers/localStorageService.ts","context/gameMode-context.tsx","components/navbar/dropdown-menu/dropdown-menu-item/DropdownMenuItem.tsx","components/navbar/dropdown-menu/DropdownMenu.tsx","components/navbar/dropdown/Dropdown.tsx","components/navbar/navbar-items/NavbarItem.tsx","components/navbar/Navbar.tsx","helpers/typedObjectKeys.ts","logic/simulationInfo.ts","hooks/useLocalStorage.ts","logic/checkForWinner.ts","logic/AI.ts","helpers/bindTrailingArgs.ts","pages/home-page/home-page-components/AivsAi-mode/AivsAi.tsx","pages/home-page/home-page-components/PvsP-mode/PvsP.tsx","helpers/generateEmptyGameState.ts","pages/home-page/home-page-components/easy-mode/Easy.tsx","pages/home-page/HomePage.tsx","App.tsx","index.tsx"],"names":["CellKind","Button","props","className","styles","button","onClick","disabled","name","Select","select_label","select","value","onChange","e","currentTarget","options","map","option","label","module","exports","AbsoluteWrapper","absolute_wrap_div","children","GameboardItem","style","empty","cellFill","Circle","circle","Cross","cross","winCombination","includes","index","winner","length","draw","Empty","clickHandler","gameboard_item_div","Gameboard","gridColumns","Math","sqrt","gameState","gameboard_div","gridTemplateColumns","gridTemplateRows","item","numberInput","SimulationPage","data","useState","simulatedGames","setSimulatedGames","isLoading","setIsLoading","circleAi","setCircleAi","crossAi","setCrossAi","number","setNumber","onClickHandler","a","worker","Worker","type","wrap","simulate","games","reduce","resArray","game","simulation_page","simulation_page_grid_div","min","max","step","simulation_pie_div","title","color","dataEntry","labelStyle","fontSize","fontFamily","animate","labelPosition","SimulatedGame","result","simulated_game","simulated_game_gameboard_div","InputNumber","useEffect","inputNumber","timeout","setTimeout","clearTimeout","input_label","input","Loading","text","split","base","loop","config","wobbly","from","transform","opacity","to","springs","useSprings","t","i","delay","loading_div","s","div","GameModeInfo","PvsP","AIvsAI","Easy","Hard","localStorageService","key","localStorage","setItem","JSON","stringify","otherwise","getItem","parse","localStorageKey","initialGameMode","GameModeContext","React","createContext","gameMode","setGameMode","GameModeContextProvider","Provider","DropdownMenuItem","onMouseEnter","onMouseEnterHandler","DropdownMenu","dropdown_menu","dropdown_menu_ul","dropdown_menu_p","info","Dropdown","dropdown","NavbarItem","open","setOpen","nav_item","onMouseLeave","route","nav_item_button","gameModeInfoKeys","object","k","arr","typedObjectKeys","Navbar","setInfo","useContext","history","useHistory","navbar","navbar_ul","push","useLocalStorage","initialValue","initialiazeState","storedValue","setStoredValue","checkForWinner","lengthSqrt","rowSet","Set","rowKeys","columnSet","columnKeys","diagonalSet","diagonalKeys","checkForDrawSet","indexDiagonal","j","indexRow","indexColumn","add","size","has","values","next","clear","getEmptySpotsArray","prevVal","curVal","randomAi","emptySpotsArray","ceil","floor","random","miniMaxScope","aiPlayer","opponent","miniMax","player","memo","target","score","moves","move","currentGameState","bestMove","curValue","bindTrailingArgs","func","boundArgs","args","allArgs","isWin","isPlaying","setIsPlaying","timeOut","console","log","aiFunc","turn","moveAI","aivsai_div","initialSize","toString","gridSize","setGridSize","generateEmptyGameState","initialState","gameStates","setHistory","gameStateCopy","indexMove","prevState","slice","changeState","HomePage","win","setWin","state","setState","useCallback","changedGameboardState","aiMove","bindedMinimax","winText","homepage","gamestate","homepage_div_gameboard","App","location","useLocation","transitions","useTransition","slow","enter","leave","Fragment","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00f97fdc.chunk.js","sourcesContent":["export enum CellKind {\r\n  Circle = \"Circle\",\r\n  Cross = \"Cross\",\r\n  Empty = \"Draw\",\r\n}\r\n","import styles from \"./Button.module.scss\";\r\n\r\ntype ButtonPropsType = {\r\n  name: string;\r\n  onClick: any;\r\n  disabled?: boolean;\r\n};\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n  return (\r\n    <button\r\n      className={styles.button}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import styles from \"./Select.module.scss\";\r\n\r\ntype OptionValue = string | number;\r\n\r\ntype Option<T extends OptionValue> = {\r\n  value: T;\r\n  label: string;\r\n};\r\n\r\ntype SelectProps<T extends OptionValue> = {\r\n  options: Option<T>[];\r\n  value: T;\r\n  onChange: (value: string) => void;\r\n  name?: string;\r\n};\r\nconst Select = <T extends OptionValue>(props: SelectProps<T>) => {\r\n  const handleOnChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    props.onChange(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <label className={styles.select_label}>\r\n      {props.name}\r\n      <select\r\n        className={styles.select}\r\n        value={props.value}\r\n        onChange={handleOnChange}\r\n      >\r\n        {props.options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameboard_item_div\":\"GameboardItem_gameboard_item_div__3929z\",\"cross\":\"GameboardItem_cross__x8R52\",\"circle\":\"GameboardItem_circle__1bNu0\",\"winner\":\"GameboardItem_winner__1Rvtl\",\"draw\":\"GameboardItem_draw__Tx4YD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"simulation_page\":\"SimulationPage_simulation_page__3PNR_\",\"simulation_page_grid_div\":\"SimulationPage_simulation_page_grid_div__48Jlf\",\"select\":\"SimulationPage_select__3uCKV\",\"simulation_pie_div\":\"SimulationPage_simulation_pie_div__2ffc_\"};","import { ReactNode } from \"react\";\r\nimport styles from \"./AbsoluteWrapper.module.scss\";\r\n\r\ntype AbsoluteWrapperProps = {\r\n  children: ReactNode;\r\n};\r\n\r\nconst AbsoluteWrapper = (props: AbsoluteWrapperProps) => {\r\n  return <div className={styles.absolute_wrap_div}>{props.children}</div>;\r\n};\r\n\r\nexport default AbsoluteWrapper;\r\n","\r\nimport styles from \"./GameboardItem.module.scss\";\r\nimport { CellKind } from \"../../../types/cellKind\";\r\n\r\ntype GameboardItemProps = {\r\n  cellFill: CellKind;\r\n  index: number;\r\n  winCombination: number[] | undefined;\r\n  clickHandler: (index: number) => void;\r\n};\r\n\r\nconst GameboardItem = (props: GameboardItemProps) => {\r\n  const onClickHandler = () => {\r\n    if (props.cellFill !== CellKind.Empty) return;\r\n    props.clickHandler(props.index);\r\n  };\r\n\r\n  let style = styles.empty;\r\n\r\n  if (props.cellFill === CellKind.Circle) {\r\n    style = styles.circle;\r\n  }\r\n\r\n  if (props.cellFill === CellKind.Cross) {\r\n    style = styles.cross;\r\n  }\r\n\r\n  if (props.winCombination && props.winCombination.includes(props.index)) {\r\n    style = `${style} ${styles.winner}`;\r\n  }\r\n\r\n  if (props.winCombination && !props.winCombination.length) {\r\n    style = `${style} ${styles.draw}`;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={onClickHandler}\r\n      className={`${styles.gameboard_item_div} ${style}`}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default GameboardItem;\r\n","import styles from \"./Gameboard.module.scss\";\r\nimport { CellKind } from \"../../types/cellKind\";\r\nimport GameboardItem from \"./GameboardItem/GameboardItem\";\r\n\r\ntype GameboardProps = {\r\n  gameState: CellKind[];\r\n  winCombination: number[] | undefined;\r\n  clickHandler: (index: number) => void;\r\n};\r\n\r\nconst Gameboard = (props: GameboardProps) => {\r\n  const gridColumns = Math.sqrt(props.gameState.length);\r\n  return (\r\n    <div\r\n      className={styles.gameboard_div}\r\n      style={{\r\n        gridTemplateColumns: `repeat(${gridColumns}, 1fr)`,\r\n        gridTemplateRows: `repeat(${gridColumns}, 1fr)`,\r\n      }}\r\n    >\r\n      {props.gameState.map((item, index) => {\r\n        return (\r\n          <GameboardItem\r\n            key={index}\r\n            index={index}\r\n            cellFill={item}\r\n            clickHandler={props.clickHandler}\r\n            winCombination={props.winCombination}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gameboard;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown_menu\":\"DropdownMenu_dropdown_menu__3AN9h\",\"dropdown_menu_ul\":\"DropdownMenu_dropdown_menu_ul__z1JGj\",\"dropdown_menu_p\":\"DropdownMenu_dropdown_menu_p__nFtxK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1d0oY\",\"navbar_ul\":\"Navbar_navbar_ul__l91T-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_item\":\"NavbarItem_nav_item__3xXER\",\"nav_item_button\":\"NavbarItem_nav_item_button__24DG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homepage\":\"HomePage_homepage__1klUk\",\"homepage_div_gameboard\":\"HomePage_homepage_div_gameboard__2J9Pt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select_label\":\"Select_select_label__AsInw\",\"select\":\"Select_select__23rDm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"simulated_game\":\"SimulatedGame_simulated_game__2fQgm\",\"simulated_game_gameboard_div\":\"SimulatedGame_simulated_game_gameboard_div__1E42G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_label\":\"InputNumber_input_label__K_elD\",\"input\":\"InputNumber_input__3KllJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DropdownMenuItem_item__3Ag1i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"Dropdown_dropdown__21DRP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameboard_div\":\"Gameboard_gameboard_div__3l_Co\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"absolute_wrap_div\":\"AbsoluteWrapper_absolute_wrap_div__2RbBF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aivsai_div\":\"AIvsAI_aivsai_div__kB9s7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3NkHr\"};","import styles from \"./SimulationPage.module.scss\";\r\nimport { useState } from \"react\";\r\nimport SimulatedGame from \"./simulation-page-components/simulated-game/SimulatedGame\";\r\nimport AbsoluteWrapper from \"../../components/absolute-wrapper/AbsoluteWrapper\";\r\nimport { ReturnTypeSimulate } from \"../../logic/simulate\";\r\nimport Button from \"../../components/atoms/button/Button\";\r\nimport InputNumber from \"../../components/atoms/input-number/InputNumber\";\r\nimport Select from \"../../components/atoms/select/Select\";\r\nimport Loading from \"../../components/atoms/loading/Loading\";\r\nimport { wrap } from \"comlink\";\r\nimport { PieChart } from \"react-minimal-pie-chart\";\r\nimport { CellKind } from \"../../types/cellKind\";\r\n\r\nconst numberInput = {\r\n  min: 1,\r\n  max: 50,\r\n  step: 1,\r\n};\r\n\r\nconst options = [\r\n  { value: \"random\", label: \"RandomAI\" },\r\n  { value: \"miniMax\", label: \"MiniMax\" },\r\n];\r\n\r\nconst SimulationPage = () => {\r\n  const [simulatedGames, setSimulatedGames] =\r\n    useState<null | ReturnTypeSimulate>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [circleAi, setCircleAi] = useState(options[0].value);\r\n  const [crossAi, setCrossAi] = useState(options[0].value);\r\n  const [number, setNumber] = useState(numberInput.min);\r\n\r\n  const onClickHandler = async () => {\r\n    if (isLoading) return;\r\n    setIsLoading(true);\r\n    const worker = new Worker(\"../../worker\", {\r\n      name: \"simulateWorker\",\r\n      type: \"module\",\r\n    });\r\n    const { simulate } = wrap<import(\"../../worker\").SimulateWorker>(worker);\r\n    const games = await simulate(number, circleAi, crossAi);\r\n    setSimulatedGames(games);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const selectCircleAi = (value: string) => {\r\n    setCircleAi(value);\r\n  };\r\n\r\n  const selectCrossAi = (value: string) => {\r\n    setCrossAi(value);\r\n  };\r\n\r\n  const changeNumber = (value: number) => {\r\n    setNumber(value);\r\n  };\r\n\r\n  let data: [number, number, number];\r\n\r\n  if (simulatedGames) {\r\n    data = simulatedGames.reduce<[number, number, number]>(\r\n      (resArray, game) => {\r\n        if (game.winner === CellKind.Empty) {\r\n          resArray[0]++;\r\n        }\r\n        if (game.winner === CellKind.Circle) {\r\n          resArray[1]++;\r\n        }\r\n        if (game.winner === CellKind.Cross) {\r\n          resArray[2]++;\r\n        }\r\n        return resArray;\r\n      },\r\n      [0, 0, 0]\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AbsoluteWrapper>\r\n      <div className={styles.simulation_page}>\r\n        <div className={styles.simulation_page_grid_div}>\r\n          <Select\r\n            options={options}\r\n            value={circleAi}\r\n            onChange={selectCircleAi}\r\n            name=\"Circle AI:\"\r\n          />\r\n          <Select\r\n            options={options}\r\n            value={crossAi}\r\n            onChange={selectCrossAi}\r\n            name=\"Cross AI:\"\r\n          />\r\n          <InputNumber\r\n            min={numberInput.min}\r\n            max={numberInput.max}\r\n            step={numberInput.step}\r\n            value={number}\r\n            onChange={changeNumber}\r\n            name=\"Number of simulation:\"\r\n          />\r\n          <Button onClick={onClickHandler} name=\"Simulate\" />\r\n        </div>\r\n        {isLoading && <Loading name=\"SIMULATING...\" />}\r\n        {data!! && (\r\n          <div className={styles.simulation_pie_div}>\r\n            <PieChart\r\n              data={[\r\n                { title: \"Draw\", value: data[0], color: \"#E9B5B4\" },\r\n                { title: \"Circle\", value: data[1], color: \"#A5A6BC\" },\r\n                { title: \"Cross\", value: data[2], color: \"#BBD0BA\" },\r\n              ]}\r\n              label={({ dataEntry }) => {\r\n                if (dataEntry.value > 0) {\r\n                  return `${dataEntry.title} ${dataEntry.value}`;\r\n                }\r\n              }}\r\n              labelStyle={{\r\n                fontSize: \"0.35rem\",\r\n                fontFamily: \"inherit\",\r\n              }}\r\n              animate={true}\r\n              labelPosition={50}\r\n            />\r\n          </div>\r\n        )}\r\n        <div className={styles.simulation_page_grid_div}>\r\n          {simulatedGames?.map((game, index) => {\r\n            return (\r\n              <SimulatedGame\r\n                gameState={game.gameState}\r\n                winCombination={game.winCombination}\r\n                index={index + 1}\r\n                winner={game.winner}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </AbsoluteWrapper>\r\n  );\r\n};\r\n\r\nexport default SimulationPage;\r\n","import styles from \"./SimulatedGame.module.scss\";\r\nimport { CellKind } from \"../../../../types/cellKind\";\r\nimport Gameboard from \"../../../../components/Gameboard/Gameboard\";\r\n\r\ntype SimulatedGamePropsType = {\r\n  gameState: CellKind[];\r\n  winCombination: number[] | undefined;\r\n  index: number;\r\n  winner: CellKind;\r\n};\r\n\r\nconst SimulatedGame = (props: SimulatedGamePropsType) => {\r\n  let result = `${props.winner} won`;\r\n\r\n  if (props.winner === CellKind.Empty) {\r\n    result = \"Draw\";\r\n  }\r\n\r\n  return (\r\n    <div className={styles.simulated_game}>\r\n      <h1>{`Game: ${props.index}`}</h1>\r\n      <h2>{`Result: ${result}`}</h2>\r\n      <div className={styles.simulated_game_gameboard_div}>\r\n        <Gameboard\r\n          gameState={props.gameState}\r\n          winCombination={props.winCombination}\r\n          clickHandler={() => {}}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimulatedGame;\r\n","import { useEffect } from \"react\";\r\nimport styles from \"./InputNumber.module.scss\";\r\n\r\ntype InputNumberPropsType = {\r\n  value: number;\r\n  onChange: (value: number) => void;\r\n  min: number;\r\n  max: number;\r\n  step: number;\r\n  name?: string;\r\n};\r\n\r\nconst InputNumber = (props: InputNumberPropsType) => {\r\n  useEffect(() => {\r\n    let inputNumber = props.value;\r\n\r\n    if (inputNumber > props.max || inputNumber < props.min) {\r\n      inputNumber = inputNumber > props.max ? props.max : props.min;\r\n      const timeout = setTimeout(() => {\r\n        props.onChange(inputNumber);\r\n      }, 200);\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  }, [props.value]);\r\n\r\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const inputNumber = +e.currentTarget.value;\r\n    props.onChange(inputNumber);\r\n  };\r\n\r\n  return (\r\n    <label className={styles.input_label}>\r\n      {props.name}\r\n      <input\r\n        className={styles.input}\r\n        type=\"number\"\r\n        value={props.value}\r\n        onChange={onChangeHandler}\r\n        min={props.min}\r\n        max={props.max}\r\n        step={props.step}\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default InputNumber;\r\n","import styles from \"./Loading.module.scss\";\r\nimport { useSprings, animated, config } from \"@react-spring/web\";\r\n\r\ntype LoadingProps = {\r\n  name: string;\r\n};\r\n\r\nconst Loading = (props: LoadingProps) => {\r\n  const text = props.name.split(\"\");\r\n\r\n  const base = {\r\n    loop: true,\r\n    config: config.wobbly,\r\n    from: { transform: \"translate3d(0,0,0)\", opacity: 1, color: \"#D46615\" },\r\n    to: [\r\n      { transform: \"translate3d(0,-40px,0)\", opacity: 0, color: \"#7BFF33\" },\r\n      { transform: \"translate3d(0,0,0)\", opacity: 1, color: \"#D46615\" },\r\n    ],\r\n  };\r\n\r\n  const springs = useSprings(\r\n    text.length,\r\n    text.map((t, i) => ({ ...base, delay: 10 * i }))\r\n  );\r\n\r\n  return (\r\n    <div className={styles.loading_div}>\r\n      {springs.map((s, i) => {\r\n        return (\r\n          <animated.div key={`char${i}`} style={s}>\r\n            {text[i] === \" \" ? <>&nbsp;</> : text[i]}\r\n          </animated.div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading_div\":\"Loading_loading_div__HqqQw\"};","module.exports = __webpack_public_path__ + \"static/js/simulateWorker.e09140a6.chunk.worker.js\"","import { GameModesType } from \"../types/game-mode-type\";\r\n\r\nexport type GameModeInfoType = {\r\n  [Mode in GameModesType]: string;\r\n};\r\n\r\nexport const GameModeInfo: GameModeInfoType = {\r\n  PvsP: \"Play against a friend on 3x3 to 5x5 board\",\r\n  AIvsAI: \"Watch AI play against other AI\",\r\n  Easy: \"Play against random AI. You can undo your moves\",\r\n  Hard: \"Play against unbeatable AI\",\r\n};\r\n","class LocalStorageService {\r\n  setItem(key: string, value: any): void {\r\n    localStorage.setItem(key, JSON.stringify({ value }));\r\n  }\r\n\r\n  getItem<T>(key: string): T | null;\r\n  getItem<T>(key: string, otherwise: T): T;\r\n  getItem<T>(key: string, otherwise?: T): T | null {\r\n    const data: string | null = localStorage.getItem(key);\r\n    if (data !== null) {\r\n      return JSON.parse(data).value;\r\n    }\r\n\r\n    if (otherwise) {\r\n      return otherwise;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const localStorageService = new LocalStorageService();\r\n","import React, { ReactNode, useState, useEffect } from \"react\";\r\nimport { GameModesType } from \"../types/game-mode-type\";\r\nimport { localStorageService } from \"../helpers/localStorageService\";\r\n\r\n\r\nexport type GameModeContextType = {\r\n  gameMode: GameModesType;\r\n  setGameMode: (gameMode: GameModesType) => void;\r\n};\r\n\r\nconst localStorageKey = \"gameMode\";\r\n\r\nconst initialGameMode = localStorageService.getItem<GameModesType>(\r\n  localStorageKey,\r\n  \"Easy\"\r\n);\r\n\r\nexport const GameModeContext = React.createContext({\r\n  gameMode: initialGameMode,\r\n  setGameMode: (gameMode: GameModesType) => {},\r\n});\r\n\r\ntype GameModeContextProviderType = {\r\n  children: ReactNode;\r\n};\r\n\r\nconst GameModeContextProvider = (props: GameModeContextProviderType) => {\r\n  const [gameMode, setGameMode] = useState(initialGameMode);\r\n\r\n  useEffect(() => {\r\n    localStorageService.setItem(localStorageKey, gameMode);\r\n  }, [gameMode]);\r\n\r\n  const changeGameMode = (gameMode: GameModesType) => {\r\n    setGameMode(gameMode);\r\n  };\r\n\r\n  return (\r\n    <GameModeContext.Provider\r\n      value={{ gameMode: gameMode, setGameMode: changeGameMode }}\r\n    >\r\n      {props.children}\r\n    </GameModeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default GameModeContextProvider;\r\n","import styles from \"./DropdownMenuItem.module.scss\";\r\n\r\ntype DropdownMenuItemProps = {\r\n  name: any;\r\n  onMouseEnterHandler: () => void;\r\n  onClickHandler: () => void;\r\n};\r\n\r\nconst DropdownMenuItem = (props: DropdownMenuItemProps) => {\r\n  return (\r\n    <div\r\n      className={styles.item}\r\n      onMouseEnter={() => {\r\n        props.onMouseEnterHandler();\r\n      }}\r\n      onClick={() => {\r\n        props.onClickHandler();\r\n      }}\r\n    >\r\n      {props.name}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropdownMenuItem;\r\n","import styles from \"./DropdownMenu.module.scss\";\r\nimport { ReactNode } from \"react\";\r\n\r\ntype DropdownMenuPropsType = {\r\n  info: string;\r\n  children: ReactNode;\r\n};\r\n\r\nconst DropdownMenu = (props: DropdownMenuPropsType) => {\r\n  return (\r\n    <div className={styles.dropdown_menu}>\r\n      <ul className={styles.dropdown_menu_ul}>{props.children}</ul>\r\n      <p className={styles.dropdown_menu_p}>{props.info}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropdownMenu;\r\n","import styles from \"./Dropdown.module.scss\";\r\n\r\ntype DropdownProps = {\r\n  children: JSX.Element;\r\n};\r\n\r\nconst Dropdown = (props: DropdownProps) => {\r\n  return <div className={styles.dropdown}>{props.children}</div>;\r\n};\r\n\r\nexport default Dropdown;\r\n","import styles from \"./NavbarItem.module.scss\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype NavbarItemProps = {\r\n  name: string;\r\n  route: string;\r\n  children: JSX.Element;\r\n};\r\n\r\nconst NavbarItem = (props: NavbarItemProps) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const onMouseEnterHandler = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const onMouseLeaveHandler = () => {\r\n    setOpen(false);\r\n  };\r\n  return (\r\n    <li\r\n      className={styles.nav_item}\r\n      onMouseEnter={onMouseEnterHandler}\r\n      onMouseLeave={onMouseLeaveHandler}\r\n    >\r\n      <Link to={props.route} className={styles.nav_item_button}>\r\n        {props.name}\r\n      </Link>\r\n      {open && props.children}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NavbarItem;\r\n","import styles from \"./Navbar.module.scss\";\r\nimport { useState, useContext } from \"react\";\r\nimport { GameModeInfo } from \"../../logic/game-mode-info\";\r\nimport { GameModeContext } from \"../../context/gameMode-context\";\r\nimport DropdownMenuItem from \"./dropdown-menu/dropdown-menu-item/DropdownMenuItem\";\r\nimport DropdownMenu from \"./dropdown-menu/DropdownMenu\";\r\nimport Dropdown from \"./dropdown/Dropdown\";\r\nimport NavbarItem from \"./navbar-items/NavbarItem\";\r\nimport { simulationInfo } from \"../../logic/simulationInfo\";\r\nimport { typedObjectKeys } from \"../../helpers/typedObjectKeys\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst gameModeInfoKeys = typedObjectKeys(GameModeInfo);\r\n\r\nconst Navbar = () => {\r\n  const [info, setInfo] = useState(GameModeInfo.PvsP);\r\n  const { setGameMode, gameMode } = useContext(GameModeContext);\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <nav className={styles.navbar}>\r\n      <ul className={styles.navbar_ul}>\r\n        <NavbarItem name=\"Game Modes\" route=\"/\">\r\n          <DropdownMenu info={info}>\r\n            {gameModeInfoKeys.map((key) => {\r\n              return (\r\n                <DropdownMenuItem\r\n                  name={key}\r\n                  onMouseEnterHandler={() => {\r\n                    setInfo(GameModeInfo[key]);\r\n                  }}\r\n                  key={key}\r\n                  onClickHandler={() => {\r\n                    if (gameMode === key) return;\r\n                    history.push(\"/\");\r\n                    setTimeout(() => {\r\n                      setGameMode(key);\r\n                    }, 200);\r\n                  }}\r\n                />\r\n              );\r\n            })}\r\n          </DropdownMenu>\r\n        </NavbarItem>\r\n        <NavbarItem name=\"Simulate\" route=\"/sim\">\r\n          <Dropdown>\r\n            <p>{simulationInfo}</p>\r\n          </Dropdown>\r\n        </NavbarItem>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","export const typedObjectKeys = <T>(object: T) => {\r\n  type Keys = keyof typeof object;\r\n  let k: Keys;\r\n  let arr: Keys[] = [];\r\n  for (k in object) {\r\n    arr = [...arr, k];\r\n  }\r\n  return arr;\r\n};\r\n","export const simulationInfo = \"Simulate up to 50 games of AIvsAI\";\r\n","import { localStorageService } from \"../helpers/localStorageService\";\r\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\n\r\nconst useLocalStorage = <T>(\r\n  key: string,\r\n  initialValue: T\r\n): [T, Dispatch<SetStateAction<T>>] => {\r\n  const initialiazeState = () => {\r\n    const localData = localStorageService.getItem<T>(key, initialValue);\r\n    return localData;\r\n  };\r\n\r\n  const [storedValue, setStoredValue] = useState<T>(initialiazeState);\r\n\r\n  useEffect(() => {\r\n    setStoredValue(initialiazeState);\r\n  }, [key]);\r\n\r\n  useEffect(() => {\r\n    localStorageService.setItem(key, storedValue);\r\n  }, [storedValue]);\r\n\r\n  return [storedValue, setStoredValue];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import { CellKind } from \"../types/cellKind\";\r\n\r\n\r\nexport const checkForWinner = (gameState: CellKind[]) => {\r\n  const lengthSqrt = Math.sqrt(gameState.length);\r\n\r\n  const rowSet = new Set<CellKind>();\r\n  const rowKeys: number[] = [];\r\n\r\n  const columnSet = new Set<CellKind>();\r\n  const columnKeys: number[] = [];\r\n\r\n  const diagonalSet = new Set<CellKind>();\r\n  const diagonalKeys: number[] = [];\r\n\r\n  const checkForDrawSet = new Set<CellKind>();\r\n\r\n  for (let i = 0; i < lengthSqrt; i++) {\r\n    let indexDiagonal = i;\r\n    for (let j = 0; j < lengthSqrt; j++) {\r\n      let indexRow = i * lengthSqrt + j;\r\n      let indexColumn = i + lengthSqrt * j;\r\n      rowSet.add(gameState[indexRow]);\r\n      rowKeys.push(indexRow);\r\n\r\n      columnSet.add(gameState[indexColumn]);\r\n      columnKeys.push(indexColumn);\r\n\r\n      checkForDrawSet.add(gameState[indexRow]);\r\n\r\n      if (i === 0) {\r\n        diagonalSet.add(gameState[indexDiagonal]);\r\n        diagonalKeys.push(indexDiagonal);\r\n        indexDiagonal += lengthSqrt + 1;\r\n      }\r\n\r\n      if (i === lengthSqrt - 1) {\r\n        diagonalSet.add(gameState[indexDiagonal]);\r\n        diagonalKeys.push(indexDiagonal);\r\n        indexDiagonal += lengthSqrt - 1;\r\n      }\r\n    }\r\n\r\n    if (rowSet.size === 1 && !rowSet.has(CellKind.Empty)) {\r\n      const winner: CellKind = rowSet.values().next().value;\r\n      return { winner: winner, winCombination: rowKeys };\r\n    }\r\n\r\n    if (columnSet.size === 1 && !columnSet.has(CellKind.Empty)) {\r\n      const winner: CellKind = columnSet.values().next().value;\r\n      return { winner: winner, winCombination: columnKeys };\r\n    }\r\n\r\n    if (diagonalSet.size === 1 && !diagonalSet.has(CellKind.Empty)) {\r\n      const winner: CellKind = diagonalSet.values().next().value;\r\n      return { winner: winner, winCombination: diagonalKeys };\r\n    }\r\n\r\n    rowSet.clear();\r\n    rowKeys.length = 0;\r\n\r\n    columnSet.clear();\r\n    columnKeys.length = 0;\r\n\r\n    diagonalSet.clear();\r\n    diagonalKeys.length = 0;\r\n  }\r\n\r\n  if (!checkForDrawSet.has(CellKind.Empty)) {\r\n    return { winner: CellKind.Empty, winCombination: [] };\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport type CheckForWinnerReturnType = ReturnType<typeof checkForWinner>;\r\n","import { CellKind } from \"../types/cellKind\";\r\nimport { checkForWinner } from \"./checkForWinner\";\r\n\r\nconst getRandomIntInclusive = (min: number, max: number) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nconst getEmptySpotsArray = (gameState: CellKind[]) => {\r\n  return gameState.reduce<number[]>((prevVal, curVal, index) => {\r\n    if (curVal === CellKind.Empty) {\r\n      prevVal.push(index);\r\n      return prevVal;\r\n    }\r\n    return prevVal;\r\n  }, []);\r\n};\r\n\r\nexport const randomAi = (gameState: CellKind[]) => {\r\n  const emptySpotsArray = getEmptySpotsArray(gameState);\r\n\r\n  const index = getRandomIntInclusive(0, emptySpotsArray.length - 1);\r\n\r\n  return emptySpotsArray[index];\r\n};\r\n\r\nexport const miniMaxScope = (\r\n  gameState: CellKind[],\r\n  aiPlayer: CellKind,\r\n  opponent: CellKind\r\n): number => {\r\n  const miniMax = (\r\n    gameState: CellKind[],\r\n    player: CellKind,\r\n    memo: any = {}\r\n  ): { score: number; index: number } => {\r\n    const target = JSON.stringify(gameState);\r\n\r\n    if (target in memo) {\r\n      return memo[target];\r\n    }\r\n\r\n    const emptySpotsArray = getEmptySpotsArray(gameState);\r\n\r\n    const winner = checkForWinner(gameState);\r\n\r\n    if (winner) {\r\n      if (winner.winner === aiPlayer) {\r\n        const result = { score: 10, index: -1 };\r\n        memo[target] = result;\r\n        return result;\r\n      }\r\n\r\n      if (winner.winner === opponent) {\r\n        const result = { score: -10, index: -1 };\r\n        memo[target] = result;\r\n        return result;\r\n      }\r\n\r\n      if (winner.winner === CellKind.Empty) {\r\n        const result = { score: 0, index: -1 };\r\n        memo[target] = result;\r\n        return result;\r\n      }\r\n    }\r\n\r\n    const moves: { index: number; score: number }[] = emptySpotsArray.map(\r\n      (item) => {\r\n        const move: { index: number; score: number } = {\r\n          index: item,\r\n          score: 0,\r\n        };\r\n\r\n        const currentGameState = gameState.map((item, index) => {\r\n          if (index === move.index) {\r\n            return player;\r\n          }\r\n          return item;\r\n        });\r\n\r\n        if (player === aiPlayer) {\r\n          move.score = miniMax(currentGameState, opponent).score;\r\n        }\r\n\r\n        if (player === opponent) {\r\n          move.score = miniMax(currentGameState, aiPlayer).score;\r\n        }\r\n\r\n        return move;\r\n      }\r\n    );\r\n\r\n    let bestMove = moves[0];\r\n\r\n    if (player === aiPlayer) {\r\n      bestMove = moves.reduce((item, curValue) => {\r\n        return item.score > curValue.score ? item : curValue;\r\n      }, moves[0]);\r\n    }\r\n\r\n    if (player === opponent) {\r\n      bestMove = moves.reduce((item, curValue) => {\r\n        return item.score < curValue.score ? item : curValue;\r\n      }, moves[0]);\r\n    }\r\n    memo[target] = bestMove;\r\n    return bestMove;\r\n  };\r\n\r\n  return miniMax(gameState, aiPlayer).index;\r\n};\r\n","export const bindTrailingArgs = <T extends (...args: any) => ReturnType<T>>(\r\n  func: T,\r\n  ...boundArgs: Parameters<T>[number][]\r\n) => {\r\n  return (...args: Parameters<T>[number][]) => {\r\n    const allArgs = [...args, ...boundArgs];\r\n    return func(...allArgs);\r\n  };\r\n};\r\n","import styles from \"./AIvsAI.module.scss\";\r\nimport Select from \"../../../../components/atoms/select/Select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { randomAi, miniMaxScope } from \"../../../../logic/AI\";\r\nimport Button from \"../../../../components/atoms/button/Button\";\r\nimport { bindTrailingArgs } from \"../../../../helpers/bindTrailingArgs\";\r\nimport { CellKind } from \"../../../../types/cellKind\";\r\n\r\nconst options = [\r\n  { value: \"random\", label: \"RandomAI\" },\r\n  { value: \"miniMax\", label: \"MiniMax\" },\r\n];\r\n\r\ntype AIvsAIpropsType = {\r\n  turn: CellKind;\r\n  moveAI: (aiFunc: (gameState: CellKind[]) => number) => void;\r\n  isWin: boolean;\r\n};\r\n\r\nconst AIvsAI = ({ isWin, ...props }: AIvsAIpropsType) => {\r\n  const [circleAi, setCircleAi] = useState(options[0].value);\r\n  const [crossAi, setCrossAi] = useState(options[0].value);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isPlaying) {\r\n      const timeOut = setTimeout(() => {\r\n        console.log(\"time\");\r\n        let aiFunc = randomAi;\r\n        if (props.turn === CellKind.Circle) {\r\n          if (circleAi === \"miniMax\") {\r\n            aiFunc = bindTrailingArgs(\r\n              miniMaxScope,\r\n              CellKind.Circle,\r\n              CellKind.Cross\r\n            );\r\n          }\r\n        }\r\n\r\n        if (props.turn === CellKind.Cross) {\r\n          if (crossAi === \"miniMax\") {\r\n            aiFunc = bindTrailingArgs(\r\n              miniMaxScope,\r\n              CellKind.Cross,\r\n              CellKind.Circle\r\n            );\r\n          }\r\n        }\r\n        console.log(aiFunc);\r\n        props.moveAI(aiFunc);\r\n      }, 400);\r\n      return () => {\r\n        clearTimeout(timeOut);\r\n      };\r\n    }\r\n  }, [isPlaying, props, circleAi, crossAi]);\r\n\r\n  useEffect(() => {\r\n    if (isWin) {\r\n      setIsPlaying(false);\r\n    }\r\n  }, [isWin]);\r\n\r\n  const selectCircleAi = (value: string) => {\r\n    setCircleAi(value);\r\n  };\r\n\r\n  const selectCrossAi = (value: string) => {\r\n    setCrossAi(value);\r\n  };\r\n\r\n  const onClickHandler = () => {\r\n    setIsPlaying(true);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.aivsai_div}>\r\n      <Select\r\n        options={options}\r\n        value={circleAi}\r\n        onChange={selectCircleAi}\r\n        name=\"Circle AI: \"\r\n      />\r\n      <Select\r\n        options={options}\r\n        value={crossAi}\r\n        onChange={selectCrossAi}\r\n        name=\"Cross AI: \"\r\n      />\r\n      <Button onClick={onClickHandler} name=\"Play\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIvsAI;\r\n","import { useState } from \"react\";\r\nimport Select from \"../../../../components/atoms/select/Select\";\r\n\r\nconst options = [\r\n  { value: \"3\", label: \"3x3\" },\r\n  { value: \"4\", label: \"4x4\" },\r\n  { value: \"5\", label: \"5x5\" },\r\n];\r\n\r\ntype PvsPpropsType = {\r\n  onChange: (size: number) => void;\r\n  initialSize: number;\r\n};\r\n\r\nconst PvsP = (props: PvsPpropsType) => {\r\n  const [gridSize, setGridSize] = useState(props.initialSize.toString());\r\n\r\n  console.log(props.initialSize);\r\n\r\n  const onChange = (size: string) => {\r\n    setGridSize(size);\r\n    props.onChange(+size);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      value={gridSize}\r\n      onChange={onChange}\r\n      name=\"Size:\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default PvsP;\r\n","import { CellKind } from \"../types/cellKind\";\r\n\r\nexport const generateEmptyGameState = (size: number) => {\r\n  const length = size * size;\r\n  const gameState = [];\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    gameState.push(CellKind.Empty);\r\n  }\r\n\r\n  return gameState;\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { generateEmptyGameState } from \"../../../../helpers/generateEmptyGameState\";\r\nimport Button from \"../../../../components/atoms/button/Button\";\r\nimport useLocalStorage from \"../../../../hooks/useLocalStorage\";\r\nimport { randomAi } from \"../../../../logic/AI\";\r\nimport { CellKind } from \"../../../../types/cellKind\";\r\n\r\ntype EasyPropsType = {\r\n  gameState: CellKind[];\r\n  turn: CellKind;\r\n  moveAI: (index: number) => void;\r\n  changeState: (gameState: CellKind[]) => void;\r\n  isWin: boolean;\r\n};\r\n\r\nconst initialState = {\r\n  gameStates: [generateEmptyGameState(3)],\r\n  index: 0,\r\n};\r\n\r\nconst Easy = (props: EasyPropsType) => {\r\n  const [history, setHistory] = useLocalStorage(\"history\", initialState);\r\n\r\n  useEffect(() => {\r\n    if (props.isWin) {\r\n      setHistory(initialState);\r\n      return;\r\n    }\r\n\r\n    if (props.turn === CellKind.Cross) {\r\n      const timeout = setTimeout(() => {\r\n        const gameStateCopy = [...props.gameState];\r\n        const indexMove = randomAi(props.gameState);\r\n        gameStateCopy[indexMove] = CellKind.Cross;\r\n        setHistory((prevState) => {\r\n          let gameStates = [...prevState.gameStates];\r\n          let index = prevState.index;\r\n          if (index < gameStates.length - 1) {\r\n            gameStates = gameStates.slice(0, prevState.index + 1);\r\n            index = gameStates.length - 1;\r\n          }\r\n          index++;\r\n          return {\r\n            gameStates: [...gameStates, [...gameStateCopy]],\r\n            index: index,\r\n          };\r\n        });\r\n        props.moveAI(indexMove);\r\n      }, 300);\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  }, [props.turn, props.isWin]);\r\n\r\n  const undo = () => {\r\n    props.changeState(history.gameStates[history.index - 1]);\r\n    setHistory((prevState) => {\r\n      return { ...prevState, index: prevState.index - 1 };\r\n    });\r\n  };\r\n\r\n  const redo = () => {\r\n    props.changeState(history.gameStates[history.index + 1]);\r\n    setHistory((prevState) => {\r\n      return { ...prevState, index: prevState.index + 1 };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={redo}\r\n        disabled={history.index >= history.gameStates.length - 1 || props.isWin}\r\n        name=\"REDO\"\r\n      />\r\n      <Button\r\n        onClick={undo}\r\n        disabled={history.index <= 0 || props.isWin}\r\n        name=\"UNDO\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Easy;\r\n","import styles from \"./HomePage.module.scss\";\r\nimport { useState, useEffect, useContext, useCallback } from \"react\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport Gameboard from \"../../components/Gameboard/Gameboard\";\r\nimport AbsoluteWrapper from \"../../components/absolute-wrapper/AbsoluteWrapper\";\r\nimport AIvsAI from \"./home-page-components/AivsAi-mode/AivsAi\";\r\nimport PvsP from \"./home-page-components/PvsP-mode/PvsP\";\r\nimport Easy from \"./home-page-components/easy-mode/Easy\";\r\nimport Button from \"../../components/atoms/button/Button\";\r\nimport { GameModeContext } from \"../../context/gameMode-context\";\r\nimport { miniMaxScope } from \"../../logic/AI\";\r\nimport { bindTrailingArgs } from \"../../helpers/bindTrailingArgs\";\r\nimport {\r\n  checkForWinner,\r\n  CheckForWinnerReturnType,\r\n} from \"../../logic/checkForWinner\";\r\nimport { CellKind } from \"../../types/cellKind\";\r\nimport { generateEmptyGameState } from \"../../helpers/generateEmptyGameState\";\r\n\r\nlet initialState = {\r\n  turn: CellKind.Circle,\r\n  gameState: generateEmptyGameState(3),\r\n};\r\n\r\ntype GameboardState = typeof initialState;\r\n\r\nconst HomePage = () => {\r\n  const [win, setWin] = useState<CheckForWinnerReturnType | null>(null);\r\n  const { gameMode } = useContext(GameModeContext);\r\n  const [state, setState] = useLocalStorage<GameboardState>(\r\n    gameMode,\r\n    initialState\r\n  );\r\n\r\n  useEffect(() => {\r\n    const winner = checkForWinner(state.gameState);\r\n    if (winner || win) {\r\n      setWin(winner);\r\n    }\r\n  }, [state.gameState, gameMode]);\r\n\r\n  const move = useCallback(\r\n    (index: number) => {\r\n      if (win) return;\r\n      setState((prevState) => {\r\n        const changedGameboardState = [...prevState.gameState];\r\n\r\n        changedGameboardState[index] = prevState.turn;\r\n\r\n        let turn = CellKind.Circle;\r\n\r\n        if (prevState.turn === CellKind.Circle) {\r\n          turn = CellKind.Cross;\r\n        }\r\n\r\n        const curState: GameboardState = {\r\n          turn: turn,\r\n          gameState: changedGameboardState,\r\n        };\r\n        return curState;\r\n      });\r\n    },\r\n    [win]\r\n  );\r\n\r\n  const aiMove = (aiFunc: (gameState: CellKind[]) => number) => {\r\n    if (win) return;\r\n    const index = aiFunc(state.gameState);\r\n    move(index);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (gameMode === \"Hard\" && state.turn === CellKind.Cross) {\r\n      const timeout = setTimeout(() => {\r\n        const bindedMinimax = bindTrailingArgs(\r\n          miniMaxScope,\r\n          CellKind.Cross,\r\n          CellKind.Circle\r\n        );\r\n        aiMove(bindedMinimax);\r\n      }, 300);\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  }, [state.turn, gameMode]);\r\n\r\n  const humanMove = (index: number) => {\r\n    if (gameMode === \"AIvsAI\") return;\r\n    if (\r\n      (gameMode === \"Easy\" || gameMode === \"Hard\") &&\r\n      state.turn === CellKind.Cross\r\n    )\r\n      return;\r\n    move(index);\r\n  };\r\n\r\n  const restartState = () => {\r\n    setState((prevState) => {\r\n      return {\r\n        turn: CellKind.Circle,\r\n        gameState: generateEmptyGameState(\r\n          Math.sqrt(prevState.gameState.length)\r\n        ),\r\n      };\r\n    });\r\n    setWin(null);\r\n  };\r\n\r\n  const changeState = (gamestate: CellKind[]) => {\r\n    if (win) return;\r\n    setState({\r\n      turn: CellKind.Circle,\r\n      gameState: gamestate,\r\n    });\r\n  };\r\n\r\n  const changeGridSize = (size: number) => {\r\n    setState({ ...initialState, gameState: generateEmptyGameState(size) });\r\n    setWin(null);\r\n  };\r\n\r\n  let turn: string | CellKind = state.turn;\r\n\r\n  if (gameMode === \"Easy\" || gameMode === \"Hard\") {\r\n    if (state.turn === CellKind.Cross) {\r\n      turn = \"AI\";\r\n    }\r\n\r\n    if (state.turn === CellKind.Circle) {\r\n      turn = \"Your\";\r\n    }\r\n  }\r\n\r\n  let winText = \"Winner: \";\r\n\r\n  if (win) {\r\n    winText = winText + win.winner;\r\n    if (win.winner === CellKind.Empty) {\r\n      winText = \"Draw\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AbsoluteWrapper>\r\n      <div className={styles.homepage}>\r\n        {!win && <h1>{`${turn} turn`}</h1>}\r\n        {win && <h1>{winText}</h1>}\r\n        {gameMode === \"PvsP\" && (\r\n          <PvsP\r\n            onChange={changeGridSize}\r\n            initialSize={Math.sqrt(state.gameState.length)}\r\n          />\r\n        )}\r\n        {gameMode === \"AIvsAI\" && (\r\n          <AIvsAI turn={state.turn} moveAI={aiMove} isWin={win !== null} />\r\n        )}\r\n        {gameMode === \"Easy\" && (\r\n          <Easy\r\n            gameState={state.gameState}\r\n            turn={state.turn}\r\n            moveAI={move}\r\n            changeState={changeState}\r\n            isWin={win !== null}\r\n          />\r\n        )}\r\n        <div className={styles.homepage_div_gameboard}>\r\n          <Gameboard\r\n            gameState={state.gameState}\r\n            winCombination={win?.winCombination}\r\n            clickHandler={humanMove}\r\n          />\r\n        </div>\r\n        {win && <Button onClick={restartState} name=\"Restart\" />}\r\n      </div>\r\n    </AbsoluteWrapper>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import \"./App.scss\";\nimport React from \"react\";\nimport { useTransition, config, animated } from \"@react-spring/web\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport HomePage from \"./pages/home-page/HomePage\";\nimport SimulationPage from \"./pages/simulation-page/SimulationPage\";\nimport { Switch, Route, useLocation } from \"react-router-dom\";\n\nconst App = () => {\n  const location = useLocation();\n  const transitions = useTransition(location, {\n    config: config.slow,\n    from: { opacity: 0, transform: \"translate(100%, 0)\" },\n    enter: { opacity: 1, transform: \"translate(0, 0)\" },\n    leave: { opacity: 0, transform: \"translate(-50%, 0)\" },\n  });\n\n  return (\n    <React.Fragment>\n      <Navbar />\n      {transitions((props, item) => (\n        <animated.div style={{ ...props }}>\n          <Switch location={item}>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route path=\"/sim\" component={SimulationPage} />\n          </Switch>\n        </animated.div>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nimport GameModeContextProvider from \"./context/gameMode-context\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <GameModeContextProvider>\n        <App />\n      </GameModeContextProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}