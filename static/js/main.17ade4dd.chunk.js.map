{"version":3,"sources":["types/cellKind.ts","components/atoms/button/Button.tsx","hooks/useLocalStorage.ts","components/atoms/select/Select.tsx","components/Gameboard/GameboardItem/GameboardItem.module.scss","helpers/localStorageService.ts","components/absolute-wrapper/AbsoluteWrapper.tsx","components/atoms/input-number/InputNumber.tsx","components/Gameboard/GameboardItem/GameboardItem.tsx","components/Gameboard/Gameboard.tsx","components/navbar/dropdown-menu/dropdown-menu-item/DropdownMenuItem.module.scss","components/navbar/dropdown-menu/DropdownMenu.module.scss","pages/simulation-page/SimulationPage.module.scss","pages/simulation-page/simulation-page-components/pagination/Pagination.module.scss","components/navbar/Navbar.module.scss","components/navbar/navbar-items/NavbarItem.module.scss","pages/home-page/HomePage.module.scss","components/atoms/select/Select.module.scss","components/atoms/input-number/InputNumber.module.scss","pages/simulation-page/simulation-page-components/simulated-game/SimulatedGame.module.scss","components/navbar/dropdown/Dropdown.module.scss","components/Gameboard/Gameboard.module.scss","components/absolute-wrapper/AbsoluteWrapper.module.scss","pages/home-page/home-page-components/AivsAi-mode/AIvsAI.module.scss","components/atoms/button/Button.module.scss","pages/simulation-page/SimulationPage.tsx","components/atoms/loading/Loading.tsx","components/atoms/loading/Loading.module.scss","pages/simulation-page/simulation-page-components/simulated-game/SimulatedGame.tsx","hooks/usePagination.ts","pages/simulation-page/simulation-page-components/pagination/Pagination.tsx","worker.ts","logic/game-mode-info.ts","context/gameMode-context.tsx","components/navbar/dropdown-menu/dropdown-menu-item/DropdownMenuItem.tsx","components/navbar/dropdown-menu/DropdownMenu.tsx","components/navbar/dropdown/Dropdown.tsx","components/navbar/navbar-items/NavbarItem.tsx","components/navbar/Navbar.tsx","helpers/typedObjectKeys.ts","logic/simulationInfo.ts","logic/checkForWinner.ts","logic/AI.ts","helpers/bindTrailingArgs.ts","pages/home-page/home-page-components/AivsAi-mode/AivsAi.tsx","hooks/useStateRelatedToProp.ts","pages/home-page/home-page-components/PvsP-mode/PvsP.tsx","helpers/generateEmptyGameState.ts","hooks/useUndoRedo.ts","pages/home-page/home-page-components/easy-mode/Easy.tsx","pages/home-page/HomePage.tsx","App.tsx","index.tsx"],"names":["CellKind","Button","props","className","styles","button","onClick","disabled","name","useLocalStorage","key","initialValue","initialiazeState","useCallback","localStorageService","getItem","useState","storedValue","setStoredValue","useEffect","setItem","Select","select_label","select","value","onChange","e","currentTarget","options","map","option","label","module","exports","localStorage","JSON","stringify","otherwise","data","parse","AbsoluteWrapper","absolute_wrap_div","children","InputNumber","min","max","step","inputNumber","timeout","setTimeout","clearTimeout","input_label","input","type","GameboardItem","style","empty","cellFill","Circle","circle","Cross","cross","winCombination","includes","index","winner","length","draw","Empty","clickHandler","gameboard_item_div","Gameboard","gridColumns","Math","sqrt","gameState","gameboard_div","gridTemplateColumns","gridTemplateRows","item","numberInput","initialInputState","circleAi","crossAi","number","mapSimGames","game","SimulationPage","simulatedGames","setSimulatedGames","isLoading","setIsLoading","inputsState","setInputsState","pathname","useLocation","path","useRouteMatch","history","useHistory","onClickHandler","a","worker","Worker","wrap","simulate","games","push","reduce","resArray","simulation_page","simulation_page_grid_div","prevState","Fragment","simulation_pie_div","title","color","dataEntry","labelStyle","fontSize","fontFamily","animate","labelPosition","render","array","mapFunction","to","Loading","text","split","base","loop","config","wobbly","from","transform","opacity","springs","useSprings","t","i","delay","loading_div","s","div","SimulatedGame","result","simulated_game","simulated_game_gameboard_div","usePagination","howManymin","pageNum","arrayToPaginate","howManyInitialState","useMemo","inputValue","passedValue","page","setPage","howMany","setHowMany","startIndex","endIndex","ceil","paginatedArray","slice","isNaN","prevPage","nextPage","Pagination","useParams","buttons","pagination","pagination_grid_div","pagination_flex_div","GameModeInfo","PvsP","AIvsAI","Easy","Hard","localStorageKey","initialGameMode","GameModeContext","React","createContext","gameMode","setGameMode","GameModeContextProvider","Provider","DropdownMenuItem","isActive","active","onMouseEnter","onMouseEnterHandler","DropdownMenu","dropdown_menu","dropdown_menu_ul","dropdown_menu_p","info","Dropdown","dropdown","NavbarItem","open","setOpen","nav_item","onMouseLeave","route","nav_item_button","gameModeInfoKeys","object","k","arr","typedObjectKeys","Navbar","setInfo","useContext","navbar","navbar_ul","checkForWinner","lengthSqrt","rowSet","Set","rowKeys","columnSet","columnKeys","diagonalSet","diagonalKeys","checkForDrawSet","indexDiagonal","j","indexRow","indexColumn","add","size","has","values","next","clear","getEmptySpotsArray","prevVal","curVal","randomAi","emptySpotsArray","floor","random","miniMaxScope","aiPlayer","opponent","miniMax","player","memo","target","score","moves","move","currentGameState","bestMove","curValue","bindTrailingArgs","func","boundArgs","args","allArgs","isWin","moveAI","turn","setCircleAi","setCrossAi","isPlaying","setIsPlaying","timeOut","aiFunc","aivsai_div","useStateRelatedToProp","prop","state","setState","initialSize","toString","gridSize","setGridSize","generateEmptyGameState","useUndoRedo","initialArray","setHistory","addItemToHistory","resetHistory","undo","redo","initialState","changeState","initialRender","useRef","current","gameStateCopy","HomePage","win","setWin","changedGameboardState","aiMove","bindedMinimax","gamestate","winText","homepage","homepage_div_gameboard","App","location","transitions","useTransition","slow","enter","leave","component","ReactDOM","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.17ade4dd.chunk.js","sourcesContent":["export enum CellKind {\r\n  Circle = \"Circle\",\r\n  Cross = \"Cross\",\r\n  Empty = \"Draw\",\r\n}\r\n","import styles from \"./Button.module.scss\";\r\n\r\ntype ButtonPropsType = {\r\n  name: string;\r\n  onClick: any;\r\n  disabled?: boolean;\r\n};\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n  return (\r\n    <button\r\n      className={styles.button}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import { localStorageService } from \"../helpers/localStorageService\";\r\nimport {\r\n  Dispatch,\r\n  SetStateAction,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\n\r\nconst useLocalStorage = <T>(\r\n  key: string,\r\n  initialValue: T\r\n): [T, Dispatch<SetStateAction<T>>] => {\r\n  const initialiazeState = useCallback(() => {\r\n    const localData = localStorageService.getItem<T>(key, initialValue);\r\n    return localData;\r\n  }, [key, initialValue]);\r\n\r\n  const [storedValue, setStoredValue] = useState<T>(initialiazeState);\r\n\r\n  useEffect(() => {\r\n    setStoredValue(initialiazeState);\r\n  }, [initialiazeState]);\r\n\r\n  useEffect(() => {\r\n    localStorageService.setItem(key, storedValue);\r\n  }, [storedValue]);\r\n\r\n  return [storedValue, setStoredValue];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import styles from \"./Select.module.scss\";\r\n\r\ntype OptionValue = string | number;\r\n\r\ntype Option<T extends OptionValue> = {\r\n  value: T;\r\n  label: string;\r\n};\r\n\r\ntype SelectProps<T extends OptionValue> = {\r\n  options: Option<T>[];\r\n  value: T;\r\n  onChange: (value: string) => void;\r\n  name?: string;\r\n};\r\nconst Select = <T extends OptionValue>(props: SelectProps<T>) => {\r\n  const handleOnChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    props.onChange(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <label className={styles.select_label}>\r\n      {props.name}\r\n      <select\r\n        className={styles.select}\r\n        value={props.value}\r\n        onChange={handleOnChange}\r\n      >\r\n        {props.options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameboard_item_div\":\"GameboardItem_gameboard_item_div__3929z\",\"cross\":\"GameboardItem_cross__x8R52\",\"circle\":\"GameboardItem_circle__1bNu0\",\"winner\":\"GameboardItem_winner__1Rvtl\",\"draw\":\"GameboardItem_draw__Tx4YD\"};","class LocalStorageService {\r\n  setItem(key: string, value: any): void {\r\n    localStorage.setItem(key, JSON.stringify({ value }));\r\n  }\r\n\r\n  getItem<T>(key: string): T | null;\r\n  getItem<T>(key: string, otherwise: T): T;\r\n  getItem<T>(key: string, otherwise?: T): T | null {\r\n    const data: string | null = localStorage.getItem(key);\r\n    if (data !== null) {\r\n      return JSON.parse(data).value;\r\n    }\r\n\r\n    if (otherwise) {\r\n      return otherwise;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const localStorageService = new LocalStorageService();\r\n","import { ReactNode } from \"react\";\r\nimport styles from \"./AbsoluteWrapper.module.scss\";\r\n\r\ntype AbsoluteWrapperProps = {\r\n  children: ReactNode;\r\n};\r\n\r\nconst AbsoluteWrapper = (props: AbsoluteWrapperProps) => {\r\n  return <div className={styles.absolute_wrap_div}>{props.children}</div>;\r\n};\r\n\r\nexport default AbsoluteWrapper;\r\n","import { useEffect } from \"react\";\r\nimport styles from \"./InputNumber.module.scss\";\r\n\r\ntype InputNumberPropsType = {\r\n  value: number;\r\n  onChange: (value: number) => void;\r\n  min: number;\r\n  max: number;\r\n  step: number;\r\n  name?: string;\r\n};\r\n\r\nconst InputNumber = ({\r\n  value,\r\n  onChange,\r\n  min,\r\n  max,\r\n  step,\r\n  name,\r\n}: InputNumberPropsType) => {\r\n  useEffect(() => {\r\n    let inputNumber = value;\r\n\r\n    if (inputNumber > max || inputNumber < min) {\r\n      inputNumber = inputNumber > max ? max : min;\r\n      const timeout = setTimeout(() => {\r\n        onChange(inputNumber);\r\n      }, 200);\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  }, [value]);\r\n\r\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const inputNumber = +e.currentTarget.value;\r\n    onChange(inputNumber);\r\n  };\r\n\r\n  return (\r\n    <label className={styles.input_label}>\r\n      {name}\r\n      <input\r\n        className={styles.input}\r\n        type=\"number\"\r\n        value={value}\r\n        onChange={onChangeHandler}\r\n        min={min}\r\n        max={max}\r\n        step={step}\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default InputNumber;\r\n","\r\nimport styles from \"./GameboardItem.module.scss\";\r\nimport { CellKind } from \"../../../types/cellKind\";\r\n\r\ntype GameboardItemProps = {\r\n  cellFill: CellKind;\r\n  index: number;\r\n  winCombination: number[] | undefined;\r\n  clickHandler: (index: number) => void;\r\n};\r\n\r\nconst GameboardItem = (props: GameboardItemProps) => {\r\n  const onClickHandler = () => {\r\n    if (props.cellFill !== CellKind.Empty) return;\r\n    props.clickHandler(props.index);\r\n  };\r\n\r\n  let style = styles.empty;\r\n\r\n  if (props.cellFill === CellKind.Circle) {\r\n    style = styles.circle;\r\n  }\r\n\r\n  if (props.cellFill === CellKind.Cross) {\r\n    style = styles.cross;\r\n  }\r\n\r\n  if (props.winCombination && props.winCombination.includes(props.index)) {\r\n    style = `${style} ${styles.winner}`;\r\n  }\r\n\r\n  if (props.winCombination && !props.winCombination.length) {\r\n    style = `${style} ${styles.draw}`;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={onClickHandler}\r\n      className={`${styles.gameboard_item_div} ${style}`}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default GameboardItem;\r\n","import styles from \"./Gameboard.module.scss\";\r\nimport { CellKind } from \"../../types/cellKind\";\r\nimport GameboardItem from \"./GameboardItem/GameboardItem\";\r\n\r\ntype GameboardProps = {\r\n  gameState: CellKind[];\r\n  winCombination: number[] | undefined;\r\n  clickHandler: (index: number) => void;\r\n};\r\n\r\nconst Gameboard = (props: GameboardProps) => {\r\n  const gridColumns = Math.sqrt(props.gameState.length);\r\n  return (\r\n    <div\r\n      className={styles.gameboard_div}\r\n      style={{\r\n        gridTemplateColumns: `repeat(${gridColumns}, 1fr)`,\r\n        gridTemplateRows: `repeat(${gridColumns}, 1fr)`,\r\n      }}\r\n    >\r\n      {props.gameState.map((item, index) => {\r\n        return (\r\n          <GameboardItem\r\n            key={index}\r\n            index={index}\r\n            cellFill={item}\r\n            clickHandler={props.clickHandler}\r\n            winCombination={props.winCombination}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gameboard;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DropdownMenuItem_item__3Ag1i\",\"active\":\"DropdownMenuItem_active__3gaGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown_menu\":\"DropdownMenu_dropdown_menu__3AN9h\",\"dropdown_menu_ul\":\"DropdownMenu_dropdown_menu_ul__z1JGj\",\"dropdown_menu_p\":\"DropdownMenu_dropdown_menu_p__nFtxK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"simulation_page\":\"SimulationPage_simulation_page__3PNR_\",\"simulation_page_grid_div\":\"SimulationPage_simulation_page_grid_div__48Jlf\",\"select\":\"SimulationPage_select__3uCKV\",\"simulation_pie_div\":\"SimulationPage_simulation_pie_div__2ffc_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__3MM1D\",\"pagination_grid_div\":\"Pagination_pagination_grid_div__yDBJL\",\"pagination_flex_div\":\"Pagination_pagination_flex_div__3ekop\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1d0oY\",\"navbar_ul\":\"Navbar_navbar_ul__l91T-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_item\":\"NavbarItem_nav_item__3xXER\",\"nav_item_button\":\"NavbarItem_nav_item_button__24DG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homepage\":\"HomePage_homepage__1klUk\",\"homepage_div_gameboard\":\"HomePage_homepage_div_gameboard__2J9Pt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select_label\":\"Select_select_label__AsInw\",\"select\":\"Select_select__23rDm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_label\":\"InputNumber_input_label__K_elD\",\"input\":\"InputNumber_input__3KllJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"simulated_game\":\"SimulatedGame_simulated_game__2fQgm\",\"simulated_game_gameboard_div\":\"SimulatedGame_simulated_game_gameboard_div__1E42G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"Dropdown_dropdown__21DRP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameboard_div\":\"Gameboard_gameboard_div__3l_Co\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"absolute_wrap_div\":\"AbsoluteWrapper_absolute_wrap_div__2RbBF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aivsai_div\":\"AIvsAI_aivsai_div__kB9s7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3NkHr\"};","import styles from \"./SimulationPage.module.scss\";\r\nimport React, { useState } from \"react\";\r\nimport Pagination from \"./simulation-page-components/pagination/Pagination\";\r\nimport AbsoluteWrapper from \"../../components/absolute-wrapper/AbsoluteWrapper\";\r\nimport { ReturnTypeSimulate } from \"../../logic/simulate\";\r\nimport Button from \"../../components/atoms/button/Button\";\r\nimport InputNumber from \"../../components/atoms/input-number/InputNumber\";\r\nimport Select from \"../../components/atoms/select/Select\";\r\nimport Loading from \"../../components/atoms/loading/Loading\";\r\nimport SimulatedGame from \"./simulation-page-components/simulated-game/SimulatedGame\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport { ArrayElement } from \"../../helpers/ArrayElement\";\r\nimport { wrap } from \"comlink\";\r\nimport { PieChart } from \"react-minimal-pie-chart\";\r\nimport { CellKind } from \"../../types/cellKind\";\r\nimport {\r\n  useHistory,\r\n  useRouteMatch,\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nconst numberInput = {\r\n  min: 1,\r\n  max: 50,\r\n  step: 1,\r\n};\r\n\r\nconst options = [\r\n  { value: \"random\", label: \"RandomAI\" },\r\n  { value: \"miniMax\", label: \"MiniMax\" },\r\n];\r\n\r\nconst initialInputState = {\r\n  circleAi: options[0].value,\r\n  crossAi: options[0].value,\r\n  number: numberInput.min,\r\n};\r\n\r\nconst mapSimGames = (game: ArrayElement<ReturnTypeSimulate>, index: number) => {\r\n  return (\r\n    <SimulatedGame\r\n      gameState={game.gameState}\r\n      winCombination={game.winCombination}\r\n      index={game.index}\r\n      winner={game.winner}\r\n      key={index}\r\n    />\r\n  );\r\n};\r\n\r\nconst SimulationPage = () => {\r\n  const [simulatedGames, setSimulatedGames] =\r\n    useLocalStorage<null | ReturnTypeSimulate>(\"simGame\", null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [inputsState, setInputsState] = useLocalStorage(\r\n    \"inputState\",\r\n    initialInputState\r\n  );\r\n  let { pathname } = useLocation();\r\n  let { path } = useRouteMatch();\r\n  let history = useHistory();\r\n\r\n  const onClickHandler = async () => {\r\n    if (isLoading) return;\r\n    setIsLoading(true);\r\n    const worker = new Worker(\"../../worker\", {\r\n      name: \"simulateWorker\",\r\n      type: \"module\",\r\n    });\r\n    const { simulate } = wrap<import(\"../../worker\").SimulateWorker>(worker);\r\n    const games = await simulate(\r\n      inputsState.number,\r\n      inputsState.circleAi,\r\n      inputsState.crossAi\r\n    );\r\n    setSimulatedGames(games);\r\n    setIsLoading(false);\r\n    history.push(`${path}/1`);\r\n  };\r\n\r\n  const selectCircleAi = (value: string) => {\r\n    setInputsState((prevState) => {\r\n      return { ...prevState, circleAi: value };\r\n    });\r\n  };\r\n\r\n  const selectCrossAi = (value: string) => {\r\n    setInputsState((prevState) => {\r\n      return { ...prevState, crossAi: value };\r\n    });\r\n  };\r\n\r\n  const changeNumber = (value: number) => {\r\n    setInputsState((prevState) => {\r\n      return { ...prevState, number: value };\r\n    });\r\n  };\r\n\r\n  const showHideGames = () => {\r\n    if (pathname === path) {\r\n      history.push(`${path}/1`);\r\n      return;\r\n    }\r\n\r\n    history.push(`${path}`);\r\n  };\r\n\r\n  let data: [number, number, number];\r\n\r\n  if (simulatedGames) {\r\n    data = simulatedGames.reduce<[number, number, number]>(\r\n      (resArray, game) => {\r\n        if (game.winner === CellKind.Empty) {\r\n          resArray[0]++;\r\n        }\r\n        if (game.winner === CellKind.Circle) {\r\n          resArray[1]++;\r\n        }\r\n        if (game.winner === CellKind.Cross) {\r\n          resArray[2]++;\r\n        }\r\n        return resArray;\r\n      },\r\n      [0, 0, 0]\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AbsoluteWrapper>\r\n      <div className={styles.simulation_page}>\r\n        <div className={styles.simulation_page_grid_div}>\r\n          <Select\r\n            options={options}\r\n            value={inputsState.circleAi}\r\n            onChange={selectCircleAi}\r\n            name=\"Circle AI:\"\r\n          />\r\n          <Select\r\n            options={options}\r\n            value={inputsState.crossAi}\r\n            onChange={selectCrossAi}\r\n            name=\"Cross AI:\"\r\n          />\r\n          <InputNumber\r\n            min={numberInput.min}\r\n            max={numberInput.max}\r\n            step={numberInput.step}\r\n            value={inputsState.number}\r\n            onChange={changeNumber}\r\n            name=\"Number of simulation:\"\r\n          />\r\n          <Button onClick={onClickHandler} name=\"Simulate\" />\r\n        </div>\r\n        {isLoading && <Loading name=\"SIMULATING...\" />}\r\n        {data!! && (\r\n          <React.Fragment>\r\n            <div className={styles.simulation_pie_div}>\r\n              <PieChart\r\n                data={[\r\n                  { title: \"Draw\", value: data[0], color: \"#E9B5B4\" },\r\n                  { title: \"Circle\", value: data[1], color: \"#A5A6BC\" },\r\n                  { title: \"Cross\", value: data[2], color: \"#BBD0BA\" },\r\n                ]}\r\n                label={({ dataEntry }) => {\r\n                  if (dataEntry.value > 0) {\r\n                    return `${dataEntry.title} ${dataEntry.value}`;\r\n                  }\r\n                }}\r\n                labelStyle={{\r\n                  fontSize: \"0.35rem\",\r\n                  fontFamily: \"inherit\",\r\n                }}\r\n                animate={true}\r\n                labelPosition={50}\r\n              />\r\n            </div>\r\n            <Button\r\n              name={path === pathname ? \"Show Games\" : \"Hide Games\"}\r\n              onClick={showHideGames}\r\n            />\r\n          </React.Fragment>\r\n        )}\r\n        <Switch>\r\n          <Route\r\n            path={`${path}/:pageNum`}\r\n            render={(props) => {\r\n              if (simulatedGames) {\r\n                return (\r\n                  <Pagination\r\n                    {...props}\r\n                    path={path}\r\n                    array={simulatedGames}\r\n                    mapFunction={mapSimGames}\r\n                  />\r\n                );\r\n              }\r\n              return <Redirect to={path} />;\r\n            }}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    </AbsoluteWrapper>\r\n  );\r\n};\r\n\r\nexport default SimulationPage;\r\n","import styles from \"./Loading.module.scss\";\r\nimport { useSprings, animated, config } from \"@react-spring/web\";\r\n\r\ntype LoadingProps = {\r\n  name: string;\r\n};\r\n\r\nconst Loading = (props: LoadingProps) => {\r\n  const text = props.name.split(\"\");\r\n\r\n  const base = {\r\n    loop: true,\r\n    config: config.wobbly,\r\n    from: { transform: \"translate3d(0,0,0)\", opacity: 1, color: \"#D46615\" },\r\n    to: [\r\n      { transform: \"translate3d(0,-40px,0)\", opacity: 0, color: \"#7BFF33\" },\r\n      { transform: \"translate3d(0,0,0)\", opacity: 1, color: \"#D46615\" },\r\n    ],\r\n  };\r\n\r\n  const springs = useSprings(\r\n    text.length,\r\n    text.map((t, i) => ({ ...base, delay: 10 * i }))\r\n  );\r\n\r\n  return (\r\n    <div className={styles.loading_div}>\r\n      {springs.map((s, i) => {\r\n        return (\r\n          <animated.div key={`char${i}`} style={s}>\r\n            {text[i] === \" \" ? <>&nbsp;</> : text[i]}\r\n          </animated.div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading_div\":\"Loading_loading_div__HqqQw\"};","import styles from \"./SimulatedGame.module.scss\";\r\nimport { CellKind } from \"../../../../types/cellKind\";\r\nimport Gameboard from \"../../../../components/Gameboard/Gameboard\";\r\n\r\ntype SimulatedGamePropsType = {\r\n  gameState: CellKind[];\r\n  winCombination: number[] | undefined;\r\n  index: number;\r\n  winner: CellKind;\r\n};\r\n\r\nconst SimulatedGame = (props: SimulatedGamePropsType) => {\r\n  let result = `${props.winner} won`;\r\n\r\n  if (props.winner === CellKind.Empty) {\r\n    result = \"Draw\";\r\n  }\r\n\r\n  return (\r\n    <div className={styles.simulated_game}>\r\n      <h1>{`Game: ${props.index}`}</h1>\r\n      <h2>{`Result: ${result}`}</h2>\r\n      <div className={styles.simulated_game_gameboard_div}>\r\n        <Gameboard\r\n          gameState={props.gameState}\r\n          winCombination={props.winCombination}\r\n          clickHandler={() => {}}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimulatedGame;\r\n","import { useMemo, useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport useLocalStorage from \"./useLocalStorage\";\r\n\r\nconst usePagination = <T extends any[]>(\r\n  howManymin: number,\r\n  pageNum: string,\r\n  path: string,\r\n  arrayToPaginate: T\r\n) => {\r\n  const howManyInitialState = useMemo(() => {\r\n    return {\r\n      inputValue: howManymin,\r\n      passedValue: howManymin,\r\n    };\r\n  }, [howManymin]);\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [howMany, setHowMany] = useLocalStorage(\"howMany\", howManyInitialState);\r\n\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (howMany.passedValue !== howMany.inputValue) {\r\n      const timeout = setTimeout(() => {\r\n        setHowMany((prevState) => {\r\n          return { ...prevState, passedValue: prevState.inputValue };\r\n        });\r\n        history.push(`${path}/1`);\r\n      }, 500);\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  }, [howMany.inputValue, setHowMany, path, howMany.passedValue, history]);\r\n\r\n  let max = 1;\r\n  const startIndex = (page - 1) * howMany.passedValue;\r\n  const endIndex = page * howMany.passedValue;\r\n\r\n  max = Math.ceil(arrayToPaginate.length / howMany.passedValue);\r\n  const paginatedArray = arrayToPaginate.slice(startIndex, endIndex) as T;\r\n\r\n  useEffect(() => {\r\n    if (isNaN(+pageNum) || +pageNum < 1) {\r\n      history.push(`${path}/1`);\r\n      return;\r\n    }\r\n    if (+pageNum > max) {\r\n      history.push(`${path}/${max}`);\r\n      return;\r\n    }\r\n\r\n    setPage(+pageNum);\r\n  }, [pageNum, history, path, max]);\r\n\r\n  const onChange = (value: number) => {\r\n    setHowMany((prevState) => {\r\n      return { ...prevState, inputValue: value };\r\n    });\r\n  };\r\n\r\n  const clickHandler = (index: number) => {\r\n    history.push(`${path}/${index}`);\r\n  };\r\n\r\n  const prevPage = () => {\r\n    history.push(`${path}/${page - 1}`);\r\n  };\r\n\r\n  const nextPage = () => {\r\n    history.push(`${path}/${page + 1}`);\r\n  };\r\n\r\n  return {\r\n    paginatedArray,\r\n    onChange,\r\n    clickHandler,\r\n    prevPage,\r\n    nextPage,\r\n    max,\r\n    howMany,\r\n    page,\r\n  };\r\n};\r\n\r\nexport default usePagination;\r\n","import styles from \"./Pagination.module.scss\";\r\nimport SimulatedGame from \"../simulated-game/SimulatedGame\";\r\nimport Button from \"../../../../components/atoms/button/Button\";\r\nimport InputNumber from \"../../../../components/atoms/input-number/InputNumber\";\r\nimport usePagination from \"../../../../hooks/usePagination\";\r\nimport { ArrayElement } from \"../../../../helpers/ArrayElement\";\r\nimport { ReturnTypeSimulate } from \"../../../../logic/simulate\";\r\nimport { useParams } from \"react-router\";\r\nimport { ReactNode } from \"react\";\r\n\r\ntype PaginationPropsType = {\r\n  path: string;\r\n  array: ReturnTypeSimulate;\r\n  mapFunction: (\r\n    item: ArrayElement<ReturnTypeSimulate>,\r\n    index: number\r\n  ) => ReactNode;\r\n};\r\n\r\nconst Pagination = (props: PaginationPropsType) => {\r\n  let { pageNum } = useParams<{ pageNum: string }>();\r\n\r\n  const {\r\n    paginatedArray,\r\n    onChange,\r\n    clickHandler,\r\n    prevPage,\r\n    nextPage,\r\n    max,\r\n    howMany,\r\n    page,\r\n  } = usePagination(9, pageNum, props.path, props.array);\r\n\r\n  const buttons = [];\r\n\r\n  for (let i = 1; i <= max; i++) {\r\n    let button = (\r\n      <Button\r\n        onClick={() => [clickHandler(i)]}\r\n        key={i}\r\n        disabled={page === i}\r\n        name={`${i}`}\r\n      />\r\n    );\r\n    buttons.push(button);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.pagination}>\r\n      <InputNumber\r\n        min={9}\r\n        max={15}\r\n        step={1}\r\n        value={howMany.inputValue}\r\n        onChange={onChange}\r\n        name={\"Numbers of games per page\"}\r\n      />\r\n      <div className={styles.pagination_grid_div}>\r\n        {paginatedArray.map(props.mapFunction)}\r\n      </div>\r\n      <div className={styles.pagination_flex_div}>\r\n        <Button onClick={prevPage} disabled={page === 1} name={`<<`} />\r\n        {buttons}\r\n        <Button onClick={nextPage} disabled={page === max} name={`>>`} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","module.exports = __webpack_public_path__ + \"static/js/simulateWorker.9f2374d0.chunk.worker.js\"","import { GameModesType } from \"../types/game-mode-type\";\r\n\r\nexport type GameModeInfoType = {\r\n  [Mode in GameModesType]: string;\r\n};\r\n\r\nexport const GameModeInfo: GameModeInfoType = {\r\n  PvsP: \"Play against a friend on 3x3 to 5x5 board\",\r\n  AIvsAI: \"Watch AI play against other AI\",\r\n  Easy: \"Play against random AI. You can undo your moves\",\r\n  Hard: \"Play against unbeatable AI\",\r\n};\r\n","import React, { ReactNode, useState, useEffect } from \"react\";\r\nimport { GameModesType } from \"../types/game-mode-type\";\r\nimport { localStorageService } from \"../helpers/localStorageService\";\r\n\r\n\r\nexport type GameModeContextType = {\r\n  gameMode: GameModesType;\r\n  setGameMode: (gameMode: GameModesType) => void;\r\n};\r\n\r\nconst localStorageKey = \"gameMode\";\r\n\r\nconst initialGameMode = localStorageService.getItem<GameModesType>(\r\n  localStorageKey,\r\n  \"Easy\"\r\n);\r\n\r\nexport const GameModeContext = React.createContext({\r\n  gameMode: initialGameMode,\r\n  setGameMode: (gameMode: GameModesType) => {},\r\n});\r\n\r\ntype GameModeContextProviderType = {\r\n  children: ReactNode;\r\n};\r\n\r\nconst GameModeContextProvider = (props: GameModeContextProviderType) => {\r\n  const [gameMode, setGameMode] = useState(initialGameMode);\r\n\r\n  useEffect(() => {\r\n    localStorageService.setItem(localStorageKey, gameMode);\r\n  }, [gameMode]);\r\n\r\n  const changeGameMode = (gameMode: GameModesType) => {\r\n    setGameMode(gameMode);\r\n  };\r\n\r\n  return (\r\n    <GameModeContext.Provider\r\n      value={{ gameMode: gameMode, setGameMode: changeGameMode }}\r\n    >\r\n      {props.children}\r\n    </GameModeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default GameModeContextProvider;\r\n","import styles from \"./DropdownMenuItem.module.scss\";\r\n\r\ntype DropdownMenuItemProps = {\r\n  name: any;\r\n  onMouseEnterHandler: () => void;\r\n  onClickHandler: () => void;\r\n  isActive?: boolean;\r\n};\r\n\r\nconst DropdownMenuItem = (props: DropdownMenuItemProps) => {\r\n  const style = props.isActive\r\n    ? `${styles.item} ${styles.active}`\r\n    : styles.item;\r\n\r\n  return (\r\n    <div\r\n      className={style}\r\n      onMouseEnter={() => {\r\n        props.onMouseEnterHandler();\r\n      }}\r\n      onClick={() => {\r\n        props.onClickHandler();\r\n      }}\r\n    >\r\n      {props.name}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropdownMenuItem;\r\n","import styles from \"./DropdownMenu.module.scss\";\r\nimport { ReactNode } from \"react\";\r\n\r\ntype DropdownMenuPropsType = {\r\n  info: string;\r\n  children: ReactNode;\r\n};\r\n\r\nconst DropdownMenu = (props: DropdownMenuPropsType) => {\r\n  return (\r\n    <div className={styles.dropdown_menu}>\r\n      <ul className={styles.dropdown_menu_ul}>{props.children}</ul>\r\n      <p className={styles.dropdown_menu_p}>{props.info}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropdownMenu;\r\n","import styles from \"./Dropdown.module.scss\";\r\n\r\ntype DropdownProps = {\r\n  children: JSX.Element;\r\n};\r\n\r\nconst Dropdown = (props: DropdownProps) => {\r\n  return <div className={styles.dropdown}>{props.children}</div>;\r\n};\r\n\r\nexport default Dropdown;\r\n","import styles from \"./NavbarItem.module.scss\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype NavbarItemProps = {\r\n  name: string;\r\n  route: string;\r\n  children: JSX.Element;\r\n};\r\n\r\nconst NavbarItem = (props: NavbarItemProps) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const onMouseEnterHandler = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const onMouseLeaveHandler = () => {\r\n    setOpen(false);\r\n  };\r\n  return (\r\n    <li\r\n      className={styles.nav_item}\r\n      onMouseEnter={onMouseEnterHandler}\r\n      onMouseLeave={onMouseLeaveHandler}\r\n    >\r\n      <Link to={props.route} className={styles.nav_item_button}>\r\n        {props.name}\r\n      </Link>\r\n      {open && props.children}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NavbarItem;\r\n","import styles from \"./Navbar.module.scss\";\r\nimport { useState, useContext } from \"react\";\r\nimport { GameModeInfo } from \"../../logic/game-mode-info\";\r\nimport { GameModeContext } from \"../../context/gameMode-context\";\r\nimport DropdownMenuItem from \"./dropdown-menu/dropdown-menu-item/DropdownMenuItem\";\r\nimport DropdownMenu from \"./dropdown-menu/DropdownMenu\";\r\nimport Dropdown from \"./dropdown/Dropdown\";\r\nimport NavbarItem from \"./navbar-items/NavbarItem\";\r\nimport { simulationInfo } from \"../../logic/simulationInfo\";\r\nimport { typedObjectKeys } from \"../../helpers/typedObjectKeys\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\n\r\nconst gameModeInfoKeys = typedObjectKeys(GameModeInfo);\r\n\r\nconst Navbar = () => {\r\n  const [info, setInfo] = useState(GameModeInfo.PvsP);\r\n  const { setGameMode, gameMode } = useContext(GameModeContext);\r\n  const history = useHistory();\r\n  let { pathname } = useLocation();\r\n  return (\r\n    <nav className={styles.navbar}>\r\n      <ul className={styles.navbar_ul}>\r\n        <NavbarItem name=\"Game Modes\" route=\"/\">\r\n          <DropdownMenu info={info}>\r\n            {gameModeInfoKeys.map((key) => {\r\n              return (\r\n                <DropdownMenuItem\r\n                  name={key}\r\n                  onMouseEnterHandler={() => {\r\n                    setInfo(GameModeInfo[key]);\r\n                  }}\r\n                  key={key}\r\n                  isActive={key === gameMode}\r\n                  onClickHandler={() => {\r\n                    if (gameMode === key && pathname === \"/\") return;\r\n                    history.push(\"/\");\r\n                    setTimeout(() => {\r\n                      setGameMode(key);\r\n                    }, 200);\r\n                  }}\r\n                />\r\n              );\r\n            })}\r\n          </DropdownMenu>\r\n        </NavbarItem>\r\n        <NavbarItem name=\"Simulate\" route=\"/sim\">\r\n          <Dropdown>\r\n            <p>{simulationInfo}</p>\r\n          </Dropdown>\r\n        </NavbarItem>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","export const typedObjectKeys = <T>(object: T) => {\r\n  type Keys = keyof typeof object;\r\n  let k: Keys;\r\n  let arr: Keys[] = [];\r\n  for (k in object) {\r\n    arr = [...arr, k];\r\n  }\r\n  return arr;\r\n};\r\n","export const simulationInfo = \"Simulate up to 50 games of AIvsAI\";\r\n","import { CellKind } from \"../types/cellKind\";\r\n\r\n\r\nexport const checkForWinner = (gameState: CellKind[]) => {\r\n  const lengthSqrt = Math.sqrt(gameState.length);\r\n\r\n  const rowSet = new Set<CellKind>();\r\n  const rowKeys: number[] = [];\r\n\r\n  const columnSet = new Set<CellKind>();\r\n  const columnKeys: number[] = [];\r\n\r\n  const diagonalSet = new Set<CellKind>();\r\n  const diagonalKeys: number[] = [];\r\n\r\n  const checkForDrawSet = new Set<CellKind>();\r\n\r\n  for (let i = 0; i < lengthSqrt; i++) {\r\n    let indexDiagonal = i;\r\n    for (let j = 0; j < lengthSqrt; j++) {\r\n      let indexRow = i * lengthSqrt + j;\r\n      let indexColumn = i + lengthSqrt * j;\r\n      rowSet.add(gameState[indexRow]);\r\n      rowKeys.push(indexRow);\r\n\r\n      columnSet.add(gameState[indexColumn]);\r\n      columnKeys.push(indexColumn);\r\n\r\n      checkForDrawSet.add(gameState[indexRow]);\r\n\r\n      if (i === 0) {\r\n        diagonalSet.add(gameState[indexDiagonal]);\r\n        diagonalKeys.push(indexDiagonal);\r\n        indexDiagonal += lengthSqrt + 1;\r\n      }\r\n\r\n      if (i === lengthSqrt - 1) {\r\n        diagonalSet.add(gameState[indexDiagonal]);\r\n        diagonalKeys.push(indexDiagonal);\r\n        indexDiagonal += lengthSqrt - 1;\r\n      }\r\n    }\r\n\r\n    if (rowSet.size === 1 && !rowSet.has(CellKind.Empty)) {\r\n      const winner: CellKind = rowSet.values().next().value;\r\n      return { winner: winner, winCombination: rowKeys };\r\n    }\r\n\r\n    if (columnSet.size === 1 && !columnSet.has(CellKind.Empty)) {\r\n      const winner: CellKind = columnSet.values().next().value;\r\n      return { winner: winner, winCombination: columnKeys };\r\n    }\r\n\r\n    if (diagonalSet.size === 1 && !diagonalSet.has(CellKind.Empty)) {\r\n      const winner: CellKind = diagonalSet.values().next().value;\r\n      return { winner: winner, winCombination: diagonalKeys };\r\n    }\r\n\r\n    rowSet.clear();\r\n    rowKeys.length = 0;\r\n\r\n    columnSet.clear();\r\n    columnKeys.length = 0;\r\n\r\n    diagonalSet.clear();\r\n    diagonalKeys.length = 0;\r\n  }\r\n\r\n  if (!checkForDrawSet.has(CellKind.Empty)) {\r\n    return { winner: CellKind.Empty, winCombination: [] };\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport type CheckForWinnerReturnType = ReturnType<typeof checkForWinner>;\r\n","import { CellKind } from \"../types/cellKind\";\r\nimport { checkForWinner } from \"./checkForWinner\";\r\n\r\nconst getRandomIntInclusive = (min: number, max: number) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nconst getEmptySpotsArray = (gameState: CellKind[]) => {\r\n  return gameState.reduce<number[]>((prevVal, curVal, index) => {\r\n    if (curVal === CellKind.Empty) {\r\n      prevVal.push(index);\r\n      return prevVal;\r\n    }\r\n    return prevVal;\r\n  }, []);\r\n};\r\n\r\nexport const randomAi = (gameState: CellKind[]) => {\r\n  const emptySpotsArray = getEmptySpotsArray(gameState);\r\n\r\n  const index = getRandomIntInclusive(0, emptySpotsArray.length - 1);\r\n\r\n  return emptySpotsArray[index];\r\n};\r\n\r\nexport const miniMaxScope = (\r\n  gameState: CellKind[],\r\n  aiPlayer: CellKind,\r\n  opponent: CellKind\r\n): number => {\r\n  const miniMax = (\r\n    gameState: CellKind[],\r\n    player: CellKind,\r\n    memo: any = {}\r\n  ): { score: number; index: number } => {\r\n    const target = JSON.stringify(gameState);\r\n\r\n    if (target in memo) {\r\n      return memo[target];\r\n    }\r\n\r\n    const emptySpotsArray = getEmptySpotsArray(gameState);\r\n\r\n    const winner = checkForWinner(gameState);\r\n\r\n    if (winner) {\r\n      if (winner.winner === aiPlayer) {\r\n        const result = { score: 10, index: -1 };\r\n        memo[target] = result;\r\n        return result;\r\n      }\r\n\r\n      if (winner.winner === opponent) {\r\n        const result = { score: -10, index: -1 };\r\n        memo[target] = result;\r\n        return result;\r\n      }\r\n\r\n      if (winner.winner === CellKind.Empty) {\r\n        const result = { score: 0, index: -1 };\r\n        memo[target] = result;\r\n        return result;\r\n      }\r\n    }\r\n\r\n    const moves: { index: number; score: number }[] = emptySpotsArray.map(\r\n      (item) => {\r\n        const move: { index: number; score: number } = {\r\n          index: item,\r\n          score: 0,\r\n        };\r\n\r\n        const currentGameState = gameState.map((item, index) => {\r\n          if (index === move.index) {\r\n            return player;\r\n          }\r\n          return item;\r\n        });\r\n\r\n        if (player === aiPlayer) {\r\n          move.score = miniMax(currentGameState, opponent).score;\r\n        }\r\n\r\n        if (player === opponent) {\r\n          move.score = miniMax(currentGameState, aiPlayer).score;\r\n        }\r\n\r\n        return move;\r\n      }\r\n    );\r\n\r\n    let bestMove = moves[0];\r\n\r\n    if (player === aiPlayer) {\r\n      bestMove = moves.reduce((item, curValue) => {\r\n        return item.score > curValue.score ? item : curValue;\r\n      }, moves[0]);\r\n    }\r\n\r\n    if (player === opponent) {\r\n      bestMove = moves.reduce((item, curValue) => {\r\n        return item.score < curValue.score ? item : curValue;\r\n      }, moves[0]);\r\n    }\r\n    memo[target] = bestMove;\r\n    return bestMove;\r\n  };\r\n\r\n  return miniMax(gameState, aiPlayer).index;\r\n};\r\n","export const bindTrailingArgs = <T extends (...args: any) => ReturnType<T>>(\r\n  func: T,\r\n  ...boundArgs: Parameters<T>[number][]\r\n) => {\r\n  return (...args: Parameters<T>[number][]) => {\r\n    const allArgs = [...args, ...boundArgs];\r\n    return func(...allArgs);\r\n  };\r\n};\r\n","import styles from \"./AIvsAI.module.scss\";\r\nimport Select from \"../../../../components/atoms/select/Select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { randomAi, miniMaxScope } from \"../../../../logic/AI\";\r\nimport Button from \"../../../../components/atoms/button/Button\";\r\nimport { bindTrailingArgs } from \"../../../../helpers/bindTrailingArgs\";\r\nimport { CellKind } from \"../../../../types/cellKind\";\r\n\r\nconst options = [\r\n  { value: \"random\", label: \"RandomAI\" },\r\n  { value: \"miniMax\", label: \"MiniMax\" },\r\n];\r\n\r\ntype AIvsAIpropsType = {\r\n  turn: CellKind;\r\n  moveAI: (aiFunc: (gameState: CellKind[]) => number) => void;\r\n  isWin: boolean;\r\n};\r\n\r\nconst AIvsAI = ({ isWin, moveAI, turn }: AIvsAIpropsType) => {\r\n  const [circleAi, setCircleAi] = useState(options[0].value);\r\n  const [crossAi, setCrossAi] = useState(options[0].value);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!isPlaying) return;\r\n    const timeOut = setTimeout(() => {\r\n      let aiFunc = randomAi;\r\n      if (turn === CellKind.Circle) {\r\n        if (circleAi === \"miniMax\") {\r\n          aiFunc = bindTrailingArgs(\r\n            miniMaxScope,\r\n            CellKind.Circle,\r\n            CellKind.Cross\r\n          );\r\n        }\r\n      }\r\n\r\n      if (turn === CellKind.Cross) {\r\n        if (crossAi === \"miniMax\") {\r\n          aiFunc = bindTrailingArgs(\r\n            miniMaxScope,\r\n            CellKind.Cross,\r\n            CellKind.Circle\r\n          );\r\n        }\r\n      }\r\n      moveAI(aiFunc);\r\n    }, 400);\r\n    return () => {\r\n      clearTimeout(timeOut);\r\n    };\r\n  }, [isPlaying, moveAI, turn, circleAi, crossAi]);\r\n\r\n  useEffect(() => {\r\n    if (isWin) {\r\n      setIsPlaying(false);\r\n    }\r\n  }, [isWin]);\r\n\r\n  const selectCircleAi = (value: string) => {\r\n    setCircleAi(value);\r\n  };\r\n\r\n  const selectCrossAi = (value: string) => {\r\n    setCrossAi(value);\r\n  };\r\n\r\n  const onClickHandler = () => {\r\n    if (isPlaying) return;\r\n    setIsPlaying(true);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.aivsai_div}>\r\n      <Select\r\n        options={options}\r\n        value={circleAi}\r\n        onChange={selectCircleAi}\r\n        name=\"Circle AI: \"\r\n      />\r\n      <Select\r\n        options={options}\r\n        value={crossAi}\r\n        onChange={selectCrossAi}\r\n        name=\"Cross AI: \"\r\n      />\r\n      <Button onClick={onClickHandler} name=\"Play\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIvsAI;\r\n","import { useEffect, useState, Dispatch } from \"react\";\r\n\r\nconst useStateRelatedToProp = <T>(\r\n  prop: T\r\n): [T, Dispatch<React.SetStateAction<T>>] => {\r\n  const [state, setState] = useState(prop);\r\n\r\n  useEffect(() => {\r\n    setState(prop);\r\n  }, [prop]);\r\n\r\n  return [state, setState];\r\n};\r\n\r\nexport default useStateRelatedToProp;\r\n","import Select from \"../../../../components/atoms/select/Select\";\r\nimport useStateRelatedToProp from \"../../../../hooks/useStateRelatedToProp\";\r\n\r\nconst options = [\r\n  { value: \"3\", label: \"3x3\" },\r\n  { value: \"4\", label: \"4x4\" },\r\n  { value: \"5\", label: \"5x5\" },\r\n];\r\n\r\ntype PvsPpropsType = {\r\n  onChange: (size: number) => void;\r\n  initialSize: number;\r\n};\r\n\r\nconst PvsP = (props: PvsPpropsType) => {\r\n  const [gridSize, setGridSize] = useStateRelatedToProp(\r\n    props.initialSize.toString()\r\n  );\r\n\r\n  const onChange = (size: string) => {\r\n    setGridSize(size);\r\n    props.onChange(+size);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      value={gridSize}\r\n      onChange={onChange}\r\n      name=\"Size:\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default PvsP;\r\n","import { CellKind } from \"../types/cellKind\";\r\n\r\nexport const generateEmptyGameState = (size: number) => {\r\n  const length = size * size;\r\n  const gameState = [];\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    gameState.push(CellKind.Empty);\r\n  }\r\n\r\n  return gameState;\r\n};\r\n","import { useCallback, useMemo } from \"react\";\r\nimport useLocalStorage from \"./useLocalStorage\";\r\n\r\nconst useUndoRedo = <T extends any[]>(key: string, initialArray: T) => {\r\n  const initialiazeState = useMemo(() => {\r\n    return { array: initialArray, index: 0 };\r\n  }, [initialArray]);\r\n\r\n  const [history, setHistory] = useLocalStorage(key, initialiazeState);\r\n\r\n  type ArrayItemType = typeof history.array[0];\r\n\r\n  const addItemToHistory = useCallback(\r\n    (item: ArrayItemType) => {\r\n      setHistory((prevState) => {\r\n        let array = [...prevState.array] as T;\r\n        let index = prevState.index;\r\n        if (index < array.length - 1) {\r\n          array = array.slice(0, index + 1) as T;\r\n          index = array.length - 1;\r\n        }\r\n        index++;\r\n        array = [...array, [...item]] as T;\r\n        return { array, index };\r\n      });\r\n    },\r\n    [setHistory]\r\n  );\r\n\r\n  const resetHistory = useCallback(() => {\r\n    setHistory(initialiazeState);\r\n  }, [setHistory, initialiazeState]);\r\n\r\n  const undo = () => {\r\n    setHistory((prevState) => {\r\n      return { ...prevState, index: prevState.index - 1 };\r\n    });\r\n  };\r\n\r\n  const redo = () => {\r\n    setHistory((prevState) => {\r\n      return { ...prevState, index: prevState.index + 1 };\r\n    });\r\n  };\r\n\r\n  return { undo, redo, addItemToHistory, history, setHistory, resetHistory };\r\n};\r\n\r\nexport default useUndoRedo;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { generateEmptyGameState } from \"../../../../helpers/generateEmptyGameState\";\r\nimport Button from \"../../../../components/atoms/button/Button\";\r\nimport { randomAi } from \"../../../../logic/AI\";\r\nimport useUndoRedo from \"../../../../hooks/useUndoRedo\";\r\nimport { CellKind } from \"../../../../types/cellKind\";\r\n\r\ntype EasyPropsType = {\r\n  gameState: CellKind[];\r\n  turn: CellKind;\r\n  changeState: (gameState: CellKind[]) => void;\r\n  isWin: boolean;\r\n};\r\n\r\nconst initialState = [generateEmptyGameState(3)];\r\n\r\nconst Easy = ({ gameState, turn, changeState, isWin }: EasyPropsType) => {\r\n  const { history, undo, redo, resetHistory, addItemToHistory } = useUndoRedo(\r\n    \"history\",\r\n    initialState\r\n  );\r\n  const initialRender = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (initialRender.current) {\r\n      initialRender.current = false;\r\n    }\r\n\r\n    changeState(history.array[history.index]);\r\n  }, [history.index, history.array, changeState]);\r\n\r\n  useEffect(() => {\r\n    if (isWin) {\r\n      resetHistory();\r\n      return;\r\n    }\r\n\r\n    if (turn === CellKind.Cross) {\r\n      const timeout = setTimeout(() => {\r\n        const gameStateCopy = [...gameState];\r\n        const indexMove = randomAi(gameState);\r\n        gameStateCopy[indexMove] = CellKind.Cross;\r\n        addItemToHistory(gameStateCopy);\r\n      }, 300);\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  }, [turn, isWin, gameState, resetHistory, addItemToHistory]);\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={redo}\r\n        disabled={history.index >= history.array.length - 1 || isWin}\r\n        name=\"REDO\"\r\n      />\r\n      <Button\r\n        onClick={undo}\r\n        disabled={history.index <= 0 || isWin}\r\n        name=\"UNDO\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Easy;\r\n","import styles from \"./HomePage.module.scss\";\r\nimport { useState, useEffect, useContext, useCallback } from \"react\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport Gameboard from \"../../components/Gameboard/Gameboard\";\r\nimport AbsoluteWrapper from \"../../components/absolute-wrapper/AbsoluteWrapper\";\r\nimport AIvsAI from \"./home-page-components/AivsAi-mode/AivsAi\";\r\nimport PvsP from \"./home-page-components/PvsP-mode/PvsP\";\r\nimport Easy from \"./home-page-components/easy-mode/Easy\";\r\nimport Button from \"../../components/atoms/button/Button\";\r\nimport { GameModeContext } from \"../../context/gameMode-context\";\r\nimport { miniMaxScope } from \"../../logic/AI\";\r\nimport { bindTrailingArgs } from \"../../helpers/bindTrailingArgs\";\r\nimport {\r\n  checkForWinner,\r\n  CheckForWinnerReturnType,\r\n} from \"../../logic/checkForWinner\";\r\nimport { CellKind } from \"../../types/cellKind\";\r\nimport { generateEmptyGameState } from \"../../helpers/generateEmptyGameState\";\r\n\r\nlet initialState = {\r\n  turn: CellKind.Circle,\r\n  gameState: generateEmptyGameState(3),\r\n};\r\n\r\ntype GameboardState = typeof initialState;\r\n\r\nconst HomePage = () => {\r\n  const [win, setWin] = useState<CheckForWinnerReturnType | null>(null);\r\n  const { gameMode } = useContext(GameModeContext);\r\n  const [state, setState] = useLocalStorage<GameboardState>(\r\n    gameMode,\r\n    initialState\r\n  );\r\n\r\n  useEffect(() => {\r\n    const winner = checkForWinner(state.gameState);\r\n    if (winner && winner.winner !== win?.winner) {\r\n      setWin(winner);\r\n    }\r\n  }, [state.gameState, gameMode, win]);\r\n\r\n  const move = useCallback(\r\n    (index: number) => {\r\n      if (win) return;\r\n      setState((prevState) => {\r\n        const changedGameboardState = [...prevState.gameState];\r\n\r\n        changedGameboardState[index] = prevState.turn;\r\n\r\n        let turn = CellKind.Circle;\r\n\r\n        if (prevState.turn === CellKind.Circle) {\r\n          turn = CellKind.Cross;\r\n        }\r\n\r\n        const curState: GameboardState = {\r\n          turn: turn,\r\n          gameState: changedGameboardState,\r\n        };\r\n        return curState;\r\n      });\r\n    },\r\n    [win, setState]\r\n  );\r\n\r\n  const aiMove = useCallback(\r\n    (aiFunc: (gameState: CellKind[]) => number) => {\r\n      if (win) return;\r\n      const index = aiFunc(state.gameState);\r\n      move(index);\r\n    },\r\n    [state.gameState, win, move]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (gameMode === \"Hard\" && state.turn === CellKind.Cross) {\r\n      const timeout = setTimeout(() => {\r\n        const bindedMinimax = bindTrailingArgs(\r\n          miniMaxScope,\r\n          CellKind.Cross,\r\n          CellKind.Circle\r\n        );\r\n        aiMove(bindedMinimax);\r\n      }, 300);\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    }\r\n  }, [state.turn, gameMode, aiMove]);\r\n\r\n  const humanMove = (index: number) => {\r\n    if (gameMode === \"AIvsAI\") return;\r\n    if (\r\n      (gameMode === \"Easy\" || gameMode === \"Hard\") &&\r\n      state.turn === CellKind.Cross\r\n    )\r\n      return;\r\n    move(index);\r\n  };\r\n\r\n  const restartState = () => {\r\n    setState((prevState) => {\r\n      return {\r\n        turn: CellKind.Circle,\r\n        gameState: generateEmptyGameState(\r\n          Math.sqrt(prevState.gameState.length)\r\n        ),\r\n      };\r\n    });\r\n    setWin(null);\r\n  };\r\n\r\n  const changeState = useCallback(\r\n    (gamestate: CellKind[]) => {\r\n      if (win) return;\r\n      setState({\r\n        turn: CellKind.Circle,\r\n        gameState: gamestate,\r\n      });\r\n    },\r\n    [win, setState]\r\n  );\r\n\r\n  const changeGridSize = (size: number) => {\r\n    setState({ ...initialState, gameState: generateEmptyGameState(size) });\r\n    setWin(null);\r\n  };\r\n\r\n  let turn: string | CellKind = state.turn;\r\n\r\n  if (gameMode === \"Easy\" || gameMode === \"Hard\") {\r\n    if (state.turn === CellKind.Cross) {\r\n      turn = \"AI\";\r\n    }\r\n\r\n    if (state.turn === CellKind.Circle) {\r\n      turn = \"Your\";\r\n    }\r\n  }\r\n\r\n  let winText = \"Winner: \";\r\n\r\n  if (win) {\r\n    winText = winText + win.winner;\r\n    if (win.winner === CellKind.Empty) {\r\n      winText = \"Draw\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AbsoluteWrapper>\r\n      <div className={styles.homepage}>\r\n        {!win && <h1>{`${turn} turn`}</h1>}\r\n        {win && <h1>{winText}</h1>}\r\n        {gameMode === \"PvsP\" && (\r\n          <PvsP\r\n            onChange={changeGridSize}\r\n            initialSize={Math.sqrt(state.gameState.length)}\r\n          />\r\n        )}\r\n        {gameMode === \"AIvsAI\" && (\r\n          <AIvsAI turn={state.turn} moveAI={aiMove} isWin={win !== null} />\r\n        )}\r\n        {gameMode === \"Easy\" && (\r\n          <Easy\r\n            gameState={state.gameState}\r\n            turn={state.turn}\r\n            changeState={changeState}\r\n            isWin={win !== null}\r\n          />\r\n        )}\r\n        <div className={styles.homepage_div_gameboard}>\r\n          <Gameboard\r\n            gameState={state.gameState}\r\n            winCombination={win?.winCombination}\r\n            clickHandler={humanMove}\r\n          />\r\n        </div>\r\n        {win && <Button onClick={restartState} name=\"Restart\" />}\r\n      </div>\r\n    </AbsoluteWrapper>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\nimport { useTransition, config, animated } from \"@react-spring/web\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport HomePage from \"./pages/home-page/HomePage\";\nimport SimulationPage from \"./pages/simulation-page/SimulationPage\";\nimport { Switch, Route, useLocation } from \"react-router-dom\";\n\nconst App = () => {\n  const location = useLocation();\n  const transitions = useTransition(location, {\n    config: config.slow,\n    from: { opacity: 0, transform: \"translate(100%, 0)\" },\n    enter: { opacity: 1, transform: \"translate(0, 0)\" },\n    leave: { opacity: 0, transform: \"translate(-50%, 0)\" },\n  });\n\n  return (\n    <React.Fragment>\n      <Navbar />\n      {transitions((props, item) => (\n        <animated.div style={{ ...props }}>\n          <Switch location={item}>\n            <Route path=\"/sim\" component={SimulationPage} />\n            <Route path=\"/\" component={HomePage} />\n          </Switch>\n        </animated.div>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nimport GameModeContextProvider from \"./context/gameMode-context\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/tic-tac-toe\">\n      <GameModeContextProvider>\n        <App />\n      </GameModeContextProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}